import {
  __commonJS,
  __esm,
  __export,
  __toModule,
  init_buffer,
  init_virtual_process_polyfill
} from "./chunk-NK7FXMNM.js";

// node_modules/qrcode-vue3/node_modules/vue/dist/vue.runtime.esm.js
var vue_runtime_esm_exports = {};
__export(vue_runtime_esm_exports, {
  default: () => vue_runtime_esm_default
});
function isUndef(v) {
  return v === void 0 || v === null;
}
function isDef(v) {
  return v !== void 0 && v !== null;
}
function isTrue(v) {
  return v === true;
}
function isFalse(v) {
  return v === false;
}
function isPrimitive(value) {
  return typeof value === "string" || typeof value === "number" || typeof value === "symbol" || typeof value === "boolean";
}
function isObject(obj) {
  return obj !== null && typeof obj === "object";
}
function toRawType(value) {
  return _toString.call(value).slice(8, -1);
}
function isPlainObject(obj) {
  return _toString.call(obj) === "[object Object]";
}
function isRegExp(v) {
  return _toString.call(v) === "[object RegExp]";
}
function isValidArrayIndex(val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val);
}
function isPromise(val) {
  return isDef(val) && typeof val.then === "function" && typeof val.catch === "function";
}
function toString(val) {
  return val == null ? "" : Array.isArray(val) || isPlainObject(val) && val.toString === _toString ? JSON.stringify(val, null, 2) : String(val);
}
function toNumber(val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n;
}
function makeMap(str, expectsLowerCase) {
  var map = Object.create(null);
  var list = str.split(",");
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase ? function(val) {
    return map[val.toLowerCase()];
  } : function(val) {
    return map[val];
  };
}
function remove(arr, item) {
  if (arr.length) {
    var index2 = arr.indexOf(item);
    if (index2 > -1) {
      return arr.splice(index2, 1);
    }
  }
}
function hasOwn(obj, key) {
  return hasOwnProperty.call(obj, key);
}
function cached(fn) {
  var cache = Object.create(null);
  return function cachedFn(str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str));
  };
}
function polyfillBind(fn, ctx) {
  function boundFn(a) {
    var l = arguments.length;
    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);
  }
  boundFn._length = fn.length;
  return boundFn;
}
function nativeBind(fn, ctx) {
  return fn.bind(ctx);
}
function toArray(list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret;
}
function extend(to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to;
}
function toObject(arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res;
}
function noop(a, b, c) {
}
function looseEqual(a, b) {
  if (a === b) {
    return true;
  }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function(e, i) {
          return looseEqual(e, b[i]);
        });
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime();
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function(key) {
          return looseEqual(a[key], b[key]);
        });
      } else {
        return false;
      }
    } catch (e) {
      return false;
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b);
  } else {
    return false;
  }
}
function looseIndexOf(arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) {
      return i;
    }
  }
  return -1;
}
function once(fn) {
  var called = false;
  return function() {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  };
}
function isReserved(str) {
  var c = (str + "").charCodeAt(0);
  return c === 36 || c === 95;
}
function def(obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}
function parsePath(path) {
  if (bailRE.test(path)) {
    return;
  }
  var segments = path.split(".");
  return function(obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) {
        return;
      }
      obj = obj[segments[i]];
    }
    return obj;
  };
}
function isNative(Ctor) {
  return typeof Ctor === "function" && /native code/.test(Ctor.toString());
}
function pushTarget(target2) {
  targetStack.push(target2);
  Dep.target = target2;
}
function popTarget() {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}
function createTextVNode(val) {
  return new VNode(void 0, void 0, void 0, String(val));
}
function cloneVNode(vnode) {
  var cloned = new VNode(vnode.tag, vnode.data, vnode.children && vnode.children.slice(), vnode.text, vnode.elm, vnode.context, vnode.componentOptions, vnode.asyncFactory);
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned;
}
function toggleObserving(value) {
  shouldObserve = value;
}
function protoAugment(target2, src) {
  target2.__proto__ = src;
}
function copyAugment(target2, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target2, key, src[key]);
  }
}
function observe(value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return;
  }
  var ob;
  if (hasOwn(value, "__ob__") && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (shouldObserve && !isServerRendering() && (Array.isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob;
}
function defineReactive$$1(obj, key, val, customSetter, shallow) {
  var dep = new Dep();
  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return;
  }
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }
  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter() {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value;
    },
    set: function reactiveSetter(newVal) {
      var value = getter ? getter.call(obj) : val;
      if (newVal === value || newVal !== newVal && value !== value) {
        return;
      }
      if (customSetter) {
        customSetter();
      }
      if (getter && !setter) {
        return;
      }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}
function set(target2, key, val) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn("Cannot set reactive property on undefined, null, or primitive value: " + target2);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.length = Math.max(target2.length, key);
    target2.splice(key, 1, val);
    return val;
  }
  if (key in target2 && !(key in Object.prototype)) {
    target2[key] = val;
    return val;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option.");
    return val;
  }
  if (!ob) {
    target2[key] = val;
    return val;
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val;
}
function del(target2, key) {
  if (isUndef(target2) || isPrimitive(target2)) {
    warn("Cannot delete reactive property on undefined, null, or primitive value: " + target2);
  }
  if (Array.isArray(target2) && isValidArrayIndex(key)) {
    target2.splice(key, 1);
    return;
  }
  var ob = target2.__ob__;
  if (target2._isVue || ob && ob.vmCount) {
    warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null.");
    return;
  }
  if (!hasOwn(target2, key)) {
    return;
  }
  delete target2[key];
  if (!ob) {
    return;
  }
  ob.dep.notify();
}
function dependArray(value) {
  for (var e = void 0, i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}
function mergeData(to, from) {
  if (!from) {
    return to;
  }
  var key, toVal, fromVal;
  var keys = hasSymbol ? Reflect.ownKeys(from) : Object.keys(from);
  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    if (key === "__ob__") {
      continue;
    }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (toVal !== fromVal && isPlainObject(toVal) && isPlainObject(fromVal)) {
      mergeData(toVal, fromVal);
    }
  }
  return to;
}
function mergeDataOrFn(parentVal, childVal, vm) {
  if (!vm) {
    if (!childVal) {
      return parentVal;
    }
    if (!parentVal) {
      return childVal;
    }
    return function mergedDataFn() {
      return mergeData(typeof childVal === "function" ? childVal.call(this, this) : childVal, typeof parentVal === "function" ? parentVal.call(this, this) : parentVal);
    };
  } else {
    return function mergedInstanceDataFn() {
      var instanceData = typeof childVal === "function" ? childVal.call(vm, vm) : childVal;
      var defaultData = typeof parentVal === "function" ? parentVal.call(vm, vm) : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData);
      } else {
        return defaultData;
      }
    };
  }
}
function mergeHook(parentVal, childVal) {
  var res = childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;
  return res ? dedupeHooks(res) : res;
}
function dedupeHooks(hooks2) {
  var res = [];
  for (var i = 0; i < hooks2.length; i++) {
    if (res.indexOf(hooks2[i]) === -1) {
      res.push(hooks2[i]);
    }
  }
  return res;
}
function mergeAssets(parentVal, childVal, vm, key) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal);
  } else {
    return res;
  }
}
function checkComponents(options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}
function validateComponentName(name) {
  if (!new RegExp("^[a-zA-Z][\\-\\.0-9_" + unicodeRegExp.source + "]*$").test(name)) {
    warn('Invalid component name: "' + name + '". Component names should conform to valid custom element name in html5 specification.');
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn("Do not use built-in or reserved HTML elements as component id: " + name);
  }
}
function normalizeProps(options, vm) {
  var props2 = options.props;
  if (!props2) {
    return;
  }
  var res = {};
  var i, val, name;
  if (Array.isArray(props2)) {
    i = props2.length;
    while (i--) {
      val = props2[i];
      if (typeof val === "string") {
        name = camelize(val);
        res[name] = { type: null };
      } else if (true) {
        warn("props must be strings when using array syntax.");
      }
    }
  } else if (isPlainObject(props2)) {
    for (var key in props2) {
      val = props2[key];
      name = camelize(key);
      res[name] = isPlainObject(val) ? val : { type: val };
    }
  } else if (true) {
    warn('Invalid value for option "props": expected an Array or an Object, but got ' + toRawType(props2) + ".", vm);
  }
  options.props = res;
}
function normalizeInject(options, vm) {
  var inject = options.inject;
  if (!inject) {
    return;
  }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val) ? extend({ from: key }, val) : { from: val };
    }
  } else if (true) {
    warn('Invalid value for option "inject": expected an Array or an Object, but got ' + toRawType(inject) + ".", vm);
  }
}
function normalizeDirectives(options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === "function") {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}
function assertObjectType(name, value, vm) {
  if (!isPlainObject(value)) {
    warn('Invalid value for option "' + name + '": expected an Object, but got ' + toRawType(value) + ".", vm);
  }
}
function mergeOptions(parent, child, vm) {
  if (true) {
    checkComponents(child);
  }
  if (typeof child === "function") {
    child = child.options;
  }
  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }
  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField(key2) {
    var strat = strats[key2] || defaultStrat;
    options[key2] = strat(parent[key2], child[key2], vm, key2);
  }
  return options;
}
function resolveAsset(options, type, id, warnMissing) {
  if (typeof id !== "string") {
    return;
  }
  var assets = options[type];
  if (hasOwn(assets, id)) {
    return assets[id];
  }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) {
    return assets[camelizedId];
  }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) {
    return assets[PascalCaseId];
  }
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn("Failed to resolve " + type.slice(0, -1) + ": " + id, options);
  }
  return res;
}
function validateProp(key, propOptions, propsData, vm) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, "default")) {
      value = false;
    } else if (value === "" || value === hyphenate(key)) {
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  if (value === void 0) {
    value = getPropDefaultValue(vm, prop, key);
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  if (true) {
    assertProp(prop, key, value, vm, absent);
  }
  return value;
}
function getPropDefaultValue(vm, prop, key) {
  if (!hasOwn(prop, "default")) {
    return void 0;
  }
  var def2 = prop.default;
  if (isObject(def2)) {
    warn('Invalid default value for prop "' + key + '": Props with type Object/Array must use a factory function to return the default value.', vm);
  }
  if (vm && vm.$options.propsData && vm.$options.propsData[key] === void 0 && vm._props[key] !== void 0) {
    return vm._props[key];
  }
  return typeof def2 === "function" && getType(prop.type) !== "Function" ? def2.call(vm) : def2;
}
function assertProp(prop, name, value, vm, absent) {
  if (prop.required && absent) {
    warn('Missing required prop: "' + name + '"', vm);
    return;
  }
  if (value == null && !prop.required) {
    return;
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i], vm);
      expectedTypes.push(assertedType.expectedType || "");
      valid = assertedType.valid;
    }
  }
  var haveExpectedTypes = expectedTypes.some(function(t) {
    return t;
  });
  if (!valid && haveExpectedTypes) {
    warn(getInvalidTypeMessage(name, value, expectedTypes), vm);
    return;
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn('Invalid prop: custom validator check failed for prop "' + name + '".', vm);
    }
  }
}
function assertType(value, type, vm) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    if (!valid && t === "object") {
      valid = value instanceof type;
    }
  } else if (expectedType === "Object") {
    valid = isPlainObject(value);
  } else if (expectedType === "Array") {
    valid = Array.isArray(value);
  } else {
    try {
      valid = value instanceof type;
    } catch (e) {
      warn('Invalid prop type: "' + String(type) + '" is not a constructor', vm);
      valid = false;
    }
  }
  return {
    valid,
    expectedType
  };
}
function getType(fn) {
  var match = fn && fn.toString().match(functionTypeCheckRE);
  return match ? match[1] : "";
}
function isSameType(a, b) {
  return getType(a) === getType(b);
}
function getTypeIndex(type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1;
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i;
    }
  }
  return -1;
}
function getInvalidTypeMessage(name, value, expectedTypes) {
  var message = 'Invalid prop: type check failed for prop "' + name + '". Expected ' + expectedTypes.map(capitalize).join(", ");
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  if (expectedTypes.length === 1 && isExplicable(expectedType) && isExplicable(typeof value) && !isBoolean(expectedType, receivedType)) {
    message += " with value " + styleValue(value, expectedType);
  }
  message += ", got " + receivedType + " ";
  if (isExplicable(receivedType)) {
    message += "with value " + styleValue(value, receivedType) + ".";
  }
  return message;
}
function styleValue(value, type) {
  if (type === "String") {
    return '"' + value + '"';
  } else if (type === "Number") {
    return "" + Number(value);
  } else {
    return "" + value;
  }
}
function isExplicable(value) {
  return EXPLICABLE_TYPES.some(function(elem) {
    return value.toLowerCase() === elem;
  });
}
function isBoolean() {
  var args = [], len = arguments.length;
  while (len--)
    args[len] = arguments[len];
  return args.some(function(elem) {
    return elem.toLowerCase() === "boolean";
  });
}
function handleError(err, vm, info) {
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while (cur = cur.$parent) {
        var hooks2 = cur.$options.errorCaptured;
        if (hooks2) {
          for (var i = 0; i < hooks2.length; i++) {
            try {
              var capture = hooks2[i].call(cur, err, vm, info) === false;
              if (capture) {
                return;
              }
            } catch (e) {
              globalHandleError(e, cur, "errorCaptured hook");
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}
function invokeWithErrorHandling(handler, context, args, vm, info) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function(e) {
        return handleError(e, vm, info + " (Promise/async)");
      });
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res;
}
function globalHandleError(err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info);
    } catch (e) {
      if (e !== err) {
        logError(e, null, "config.errorHandler");
      }
    }
  }
  logError(err, vm, info);
}
function logError(err, vm, info) {
  if (true) {
    warn("Error in " + info + ': "' + err.toString() + '"', vm);
  }
  if ((inBrowser || inWeex) && typeof console !== "undefined") {
    console.error(err);
  } else {
    throw err;
  }
}
function flushCallbacks() {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}
function nextTick(cb, ctx) {
  var _resolve;
  callbacks.push(function() {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, "nextTick");
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  if (!cb && typeof Promise !== "undefined") {
    return new Promise(function(resolve) {
      _resolve = resolve;
    });
  }
}
function traverse(val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}
function _traverse(val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if (!isA && !isObject(val) || Object.isFrozen(val) || val instanceof VNode) {
    return;
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return;
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) {
      _traverse(val[i], seen);
    }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) {
      _traverse(val[keys[i]], seen);
    }
  }
}
function createFnInvoker(fns, vm) {
  function invoker() {
    var arguments$1 = arguments;
    var fns2 = invoker.fns;
    if (Array.isArray(fns2)) {
      var cloned = fns2.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      return invokeWithErrorHandling(fns2, null, arguments, vm, "v-on handler");
    }
  }
  invoker.fns = fns;
  return invoker;
}
function updateListeners(on, oldOn, add2, remove$$12, createOnceHandler2, vm) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn('Invalid handler for event "' + event.name + '": got ' + String(cur), vm);
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler2(event.name, cur, event.capture);
      }
      add2(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$12(event.name, oldOn[name], event.capture);
    }
  }
}
function mergeVNodeHook(def2, hookKey, hook) {
  if (def2 instanceof VNode) {
    def2 = def2.data.hook || (def2.data.hook = {});
  }
  var invoker;
  var oldHook = def2[hookKey];
  function wrappedHook() {
    hook.apply(this, arguments);
    remove(invoker.fns, wrappedHook);
  }
  if (isUndef(oldHook)) {
    invoker = createFnInvoker([wrappedHook]);
  } else {
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }
  invoker.merged = true;
  def2[hookKey] = invoker;
}
function extractPropsFromVNodeData(data, Ctor, tag) {
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return;
  }
  var res = {};
  var attrs2 = data.attrs;
  var props2 = data.props;
  if (isDef(attrs2) || isDef(props2)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      if (true) {
        var keyInLowerCase = key.toLowerCase();
        if (key !== keyInLowerCase && attrs2 && hasOwn(attrs2, keyInLowerCase)) {
          tip('Prop "' + keyInLowerCase + '" is passed to component ' + formatComponentName(tag || Ctor) + ', but the declared prop name is "' + key + '". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "' + altKey + '" instead of "' + key + '".');
        }
      }
      checkProp(res, props2, key, altKey, true) || checkProp(res, attrs2, key, altKey, false);
    }
  }
  return res;
}
function checkProp(res, hash, key, altKey, preserve) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true;
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true;
    }
  }
  return false;
}
function simpleNormalizeChildren(children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children);
    }
  }
  return children;
}
function normalizeChildren(children) {
  return isPrimitive(children) ? [createTextVNode(children)] : Array.isArray(children) ? normalizeArrayChildren(children) : void 0;
}
function isTextNode(node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment);
}
function normalizeArrayChildren(children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === "boolean") {
      continue;
    }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, (nestedIndex || "") + "_" + i);
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + c[0].text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== "") {
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        if (isTrue(children._isVList) && isDef(c.tag) && isUndef(c.key) && isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res;
}
function initProvide(vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === "function" ? provide.call(vm) : provide;
  }
}
function initInjections(vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function(key) {
      if (true) {
        defineReactive$$1(vm, key, result[key], function() {
          warn('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "' + key + '"', vm);
        });
      } else {
        defineReactive$$1(vm, key, result[key]);
      }
    });
    toggleObserving(true);
  }
}
function resolveInject(inject, vm) {
  if (inject) {
    var result = Object.create(null);
    var keys = hasSymbol ? Reflect.ownKeys(inject) : Object.keys(inject);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (key === "__ob__") {
        continue;
      }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break;
        }
        source = source.$parent;
      }
      if (!source) {
        if ("default" in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === "function" ? provideDefault.call(vm) : provideDefault;
        } else if (true) {
          warn('Injection "' + key + '" not found', vm);
        }
      }
    }
    return result;
  }
}
function resolveSlots(children, context) {
  if (!children || !children.length) {
    return {};
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    if ((child.context === context || child.fnContext === context) && data && data.slot != null) {
      var name = data.slot;
      var slot = slots[name] || (slots[name] = []);
      if (child.tag === "template") {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots;
}
function isWhitespace(node) {
  return node.isComment && !node.asyncFactory || node.text === " ";
}
function isAsyncPlaceholder(node) {
  return node.isComment && node.asyncFactory;
}
function normalizeScopedSlots(slots, normalSlots, prevSlots) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    return slots._normalized;
  } else if (isStable && prevSlots && prevSlots !== emptyObject && key === prevSlots.$key && !hasNormalSlots && !prevSlots.$hasNormal) {
    return prevSlots;
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== "$") {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  if (slots && Object.isExtensible(slots)) {
    slots._normalized = res;
  }
  def(res, "$stable", isStable);
  def(res, "$key", key);
  def(res, "$hasNormal", hasNormalSlots);
  return res;
}
function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function() {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === "object" && !Array.isArray(res) ? [res] : normalizeChildren(res);
    var vnode = res && res[0];
    return res && (!vnode || res.length === 1 && vnode.isComment && !isAsyncPlaceholder(vnode)) ? void 0 : res;
  };
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized;
}
function proxyNormalSlot(slots, key) {
  return function() {
    return slots[key];
  };
}
function renderList(val, render4) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === "string") {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render4(val[i], i);
    }
  } else if (typeof val === "number") {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render4(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render4(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render4(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  ret._isVList = true;
  return ret;
}
function renderSlot(name, fallbackRender, props2, bindObject) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) {
    props2 = props2 || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn("slot v-bind without argument expects an Object", this);
      }
      props2 = extend(extend({}, bindObject), props2);
    }
    nodes = scopedSlotFn(props2) || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  } else {
    nodes = this.$slots[name] || (typeof fallbackRender === "function" ? fallbackRender() : fallbackRender);
  }
  var target2 = props2 && props2.slot;
  if (target2) {
    return this.$createElement("template", { slot: target2 }, nodes);
  } else {
    return nodes;
  }
}
function resolveFilter(id) {
  return resolveAsset(this.$options, "filters", id, true) || identity;
}
function isKeyNotMatch(expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1;
  } else {
    return expect !== actual;
  }
}
function checkKeyCodes(eventKeyCode, key, builtInKeyCode, eventKeyName, builtInKeyName) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName);
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode);
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key;
  }
  return eventKeyCode === void 0;
}
function bindObjectProps(data, tag, value, asProp, isSync) {
  if (value) {
    if (!isObject(value)) {
      warn("v-bind without argument expects an Object or Array value", this);
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function(key2) {
        if (key2 === "class" || key2 === "style" || isReservedAttribute(key2)) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key2) ? data.domProps || (data.domProps = {}) : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key2);
        var hyphenatedKey = hyphenate(key2);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key2] = value[key2];
          if (isSync) {
            var on = data.on || (data.on = {});
            on["update:" + key2] = function($event) {
              value[key2] = $event;
            };
          }
        }
      };
      for (var key in value)
        loop(key);
    }
  }
  return data;
}
function renderStatic(index2, isInFor) {
  var cached2 = this._staticTrees || (this._staticTrees = []);
  var tree = cached2[index2];
  if (tree && !isInFor) {
    return tree;
  }
  tree = cached2[index2] = this.$options.staticRenderFns[index2].call(this._renderProxy, null, this);
  markStatic(tree, "__static__" + index2, false);
  return tree;
}
function markOnce(tree, index2, key) {
  markStatic(tree, "__once__" + index2 + (key ? "_" + key : ""), true);
  return tree;
}
function markStatic(tree, key, isOnce) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== "string") {
        markStaticNode(tree[i], key + "_" + i, isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}
function markStaticNode(node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}
function bindObjectListeners(data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn("v-on without argument expects an Object value", this);
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data;
}
function resolveScopedSlots(fns, res, hasDynamicKeys, contentHashKey) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    res.$key = contentHashKey;
  }
  return res;
}
function bindDynamicKeys(baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === "string" && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== "" && key !== null) {
      warn("Invalid value for dynamic directive argument (expected string or null): " + key, this);
    }
  }
  return baseObj;
}
function prependModifier(value, symbol) {
  return typeof value === "string" ? symbol + value : value;
}
function installRenderHelpers(target2) {
  target2._o = markOnce;
  target2._n = toNumber;
  target2._s = toString;
  target2._l = renderList;
  target2._t = renderSlot;
  target2._q = looseEqual;
  target2._i = looseIndexOf;
  target2._m = renderStatic;
  target2._f = resolveFilter;
  target2._k = checkKeyCodes;
  target2._b = bindObjectProps;
  target2._v = createTextVNode;
  target2._e = createEmptyVNode;
  target2._u = resolveScopedSlots;
  target2._g = bindObjectListeners;
  target2._d = bindDynamicKeys;
  target2._p = prependModifier;
}
function FunctionalRenderContext(data, props2, children, parent, Ctor) {
  var this$1 = this;
  var options = Ctor.options;
  var contextVm;
  if (hasOwn(parent, "_uid")) {
    contextVm = Object.create(parent);
    contextVm._original = parent;
  } else {
    contextVm = parent;
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;
  this.data = data;
  this.props = props2;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function() {
    if (!this$1.$slots) {
      normalizeScopedSlots(data.scopedSlots, this$1.$slots = resolveSlots(children, parent));
    }
    return this$1.$slots;
  };
  Object.defineProperty(this, "scopedSlots", {
    enumerable: true,
    get: function get3() {
      return normalizeScopedSlots(data.scopedSlots, this.slots());
    }
  });
  if (isCompiled) {
    this.$options = options;
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }
  if (options._scopeId) {
    this._c = function(a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode;
    };
  } else {
    this._c = function(a, b, c, d) {
      return createElement(contextVm, a, b, c, d, needNormalization);
    };
  }
}
function createFunctionalComponent(Ctor, propsData, data, contextVm, children) {
  var options = Ctor.options;
  var props2 = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props2[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) {
      mergeProps(props2, data.attrs);
    }
    if (isDef(data.props)) {
      mergeProps(props2, data.props);
    }
  }
  var renderContext = new FunctionalRenderContext(data, props2, children, contextVm, Ctor);
  var vnode = options.render.call(null, renderContext._c, renderContext);
  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext);
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res;
  }
}
function cloneAndMarkFunctionalResult(vnode, data, contextVm, options, renderContext) {
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  if (true) {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone;
}
function mergeProps(to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}
function createComponent(Ctor, data, context, children, tag) {
  if (isUndef(Ctor)) {
    return;
  }
  var baseCtor = context.$options._base;
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }
  if (typeof Ctor !== "function") {
    if (true) {
      warn("Invalid Component definition: " + String(Ctor), context);
    }
    return;
  }
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === void 0) {
      return createAsyncPlaceholder(asyncFactory, data, context, children, tag);
    }
  }
  data = data || {};
  resolveConstructorOptions(Ctor);
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children);
  }
  var listeners = data.on;
  data.on = data.nativeOn;
  if (isTrue(Ctor.options.abstract)) {
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }
  installComponentHooks(data);
  var name = Ctor.options.name || tag;
  var vnode = new VNode("vue-component-" + Ctor.cid + (name ? "-" + name : ""), data, void 0, void 0, void 0, context, { Ctor, propsData, listeners, tag, children }, asyncFactory);
  return vnode;
}
function createComponentInstanceForVnode(vnode, parent) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent
  };
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options);
}
function installComponentHooks(data) {
  var hooks2 = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks2[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks2[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}
function mergeHook$1(f1, f2) {
  var merged = function(a, b) {
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged;
}
function transformModel(options, data) {
  var prop = options.model && options.model.prop || "value";
  var event = options.model && options.model.event || "input";
  (data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (Array.isArray(existing) ? existing.indexOf(callback) === -1 : existing !== callback) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}
function createElement(context, tag, data, children, normalizationType, alwaysNormalize) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = void 0;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType);
}
function _createElement(context, tag, data, children, normalizationType) {
  if (isDef(data) && isDef(data.__ob__)) {
    warn("Avoid using observed data object as vnode data: " + JSON.stringify(data) + "\nAlways create fresh vnode data objects in each render!", context);
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    return createEmptyVNode();
  }
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)) {
    {
      warn("Avoid using non-primitive value as key, use string/number value instead.", context);
    }
  }
  if (Array.isArray(children) && typeof children[0] === "function") {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === "string") {
    var Ctor;
    ns = context.$vnode && context.$vnode.ns || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      if (isDef(data) && isDef(data.nativeOn) && data.tag !== "component") {
        warn("The .native modifier for v-on is only valid on components but it was used on <" + tag + ">.", context);
      }
      vnode = new VNode(config.parsePlatformTagName(tag), data, children, void 0, void 0, context);
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, "components", tag))) {
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      vnode = new VNode(tag, data, children, void 0, void 0, context);
    }
  } else {
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode;
  } else if (isDef(vnode)) {
    if (isDef(ns)) {
      applyNS(vnode, ns);
    }
    if (isDef(data)) {
      registerDeepBindings(data);
    }
    return vnode;
  } else {
    return createEmptyVNode();
  }
}
function applyNS(vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === "foreignObject") {
    ns = void 0;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (isUndef(child.ns) || isTrue(force) && child.tag !== "svg")) {
        applyNS(child, ns, force);
      }
    }
  }
}
function registerDeepBindings(data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}
function initRender(vm) {
  vm._vnode = null;
  vm._staticTrees = null;
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode;
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  vm._c = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, false);
  };
  vm.$createElement = function(a, b, c, d) {
    return createElement(vm, a, b, c, d, true);
  };
  var parentData = parentVnode && parentVnode.data;
  if (true) {
    defineReactive$$1(vm, "$attrs", parentData && parentData.attrs || emptyObject, function() {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, "$listeners", options._parentListeners || emptyObject, function() {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  } else {
    defineReactive$$1(vm, "$attrs", parentData && parentData.attrs || emptyObject, null, true);
    defineReactive$$1(vm, "$listeners", options._parentListeners || emptyObject, null, true);
  }
}
function renderMixin(Vue2) {
  installRenderHelpers(Vue2.prototype);
  Vue2.prototype.$nextTick = function(fn) {
    return nextTick(fn, this);
  };
  Vue2.prototype._render = function() {
    var vm = this;
    var ref2 = vm.$options;
    var render4 = ref2.render;
    var _parentVnode = ref2._parentVnode;
    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(_parentVnode.data.scopedSlots, vm.$slots, vm.$scopedSlots);
    }
    vm.$vnode = _parentVnode;
    var vnode;
    try {
      currentRenderingInstance = vm;
      vnode = render4.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e2) {
          handleError(e2, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn("Multiple root nodes returned from render function. Render function should return a single root node.", vm);
      }
      vnode = createEmptyVNode();
    }
    vnode.parent = _parentVnode;
    return vnode;
  };
}
function ensureCtor(comp, base) {
  if (comp.__esModule || hasSymbol && comp[Symbol.toStringTag] === "Module") {
    comp = comp.default;
  }
  return isObject(comp) ? base.extend(comp) : comp;
}
function createAsyncPlaceholder(factory, data, context, children, tag) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data, context, children, tag };
  return node;
}
function resolveAsyncComponent(factory, baseCtor) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp;
  }
  if (isDef(factory.resolved)) {
    return factory.resolved;
  }
  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    factory.owners.push(owner);
  }
  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp;
  }
  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null;
    owner.$on("hook:destroyed", function() {
      return remove(owners, owner);
    });
    var forceRender = function(renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        owners[i].$forceUpdate();
      }
      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };
    var resolve = once(function(res2) {
      factory.resolved = ensureCtor(res2, baseCtor);
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });
    var reject = once(function(reason) {
      warn("Failed to resolve async component: " + String(factory) + (reason ? "\nReason: " + reason : ""));
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });
    var res = factory(resolve, reject);
    if (isObject(res)) {
      if (isPromise(res)) {
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);
        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }
        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function() {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }
        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function() {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(true ? "timeout (" + res.timeout + "ms)" : null);
            }
          }, res.timeout);
        }
      }
    }
    sync = false;
    return factory.loading ? factory.loadingComp : factory.resolved;
  }
}
function getFirstComponentChild(children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c;
      }
    }
  }
}
function initEvents(vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}
function add(event, fn) {
  target.$on(event, fn);
}
function remove$1(event, fn) {
  target.$off(event, fn);
}
function createOnceHandler(event, fn) {
  var _target = target;
  return function onceHandler() {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  };
}
function updateComponentListeners(vm, listeners, oldListeners) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = void 0;
}
function eventsMixin(Vue2) {
  var hookRE = /^hook:/;
  Vue2.prototype.$on = function(event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm;
  };
  Vue2.prototype.$once = function(event, fn) {
    var vm = this;
    function on() {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm;
  };
  Vue2.prototype.$off = function(event, fn) {
    var vm = this;
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm;
    }
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm;
    }
    var cbs = vm._events[event];
    if (!cbs) {
      return vm;
    }
    if (!fn) {
      vm._events[event] = null;
      return vm;
    }
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break;
      }
    }
    return vm;
  };
  Vue2.prototype.$emit = function(event) {
    var vm = this;
    if (true) {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip('Event "' + lowerCaseEvent + '" is emitted in component ' + formatComponentName(vm) + ' but the handler is registered for "' + event + '". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "' + hyphenate(event) + '" instead of "' + event + '".');
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = 'event handler for "' + event + '"';
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm;
  };
}
function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function() {
    activeInstance = prevActiveInstance;
  };
}
function initLifecycle(vm) {
  var options = vm.$options;
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }
  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;
  vm.$children = [];
  vm.$refs = {};
  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}
function lifecycleMixin(Vue2) {
  Vue2.prototype._update = function(vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    if (!prevVnode) {
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false);
    } else {
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
  };
  Vue2.prototype.$forceUpdate = function() {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };
  Vue2.prototype.$destroy = function() {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return;
    }
    callHook(vm, "beforeDestroy");
    vm._isBeingDestroyed = true;
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    vm._isDestroyed = true;
    vm.__patch__(vm._vnode, null);
    callHook(vm, "destroyed");
    vm.$off();
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}
function mountComponent(vm, el, hydrating) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    if (true) {
      if (vm.$options.template && vm.$options.template.charAt(0) !== "#" || vm.$options.el || el) {
        warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.", vm);
      } else {
        warn("Failed to mount component: template or render function not defined.", vm);
      }
    }
  }
  callHook(vm, "beforeMount");
  var updateComponent;
  if (config.performance && mark) {
    updateComponent = function() {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;
      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure("vue " + name + " render", startTag, endTag);
      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure("vue " + name + " patch", startTag, endTag);
    };
  } else {
    updateComponent = function() {
      vm._update(vm._render(), hydrating);
    };
  }
  new Watcher(vm, updateComponent, noop, {
    before: function before() {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, "beforeUpdate");
      }
    }
  }, true);
  hydrating = false;
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, "mounted");
  }
  return vm;
}
function updateChildComponent(vm, propsData, listeners, parentVnode, renderChildren) {
  if (true) {
    isUpdatingChildComponent = true;
  }
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(newScopedSlots && !newScopedSlots.$stable || oldScopedSlots !== emptyObject && !oldScopedSlots.$stable || newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key || !newScopedSlots && vm.$scopedSlots.$key);
  var needsForceUpdate = !!(renderChildren || vm.$options._renderChildren || hasDynamicScopedSlot);
  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode;
  if (vm._vnode) {
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props2 = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props;
      props2[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    vm.$options.propsData = propsData;
  }
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }
  if (true) {
    isUpdatingChildComponent = false;
  }
}
function isInInactiveTree(vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) {
      return true;
    }
  }
  return false;
}
function activateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return;
    }
  } else if (vm._directInactive) {
    return;
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, "activated");
  }
}
function deactivateChildComponent(vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return;
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, "deactivated");
  }
}
function callHook(vm, hook) {
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit("hook:" + hook);
  }
  popTarget();
}
function resetSchedulerState() {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  if (true) {
    circular = {};
  }
  waiting = flushing = false;
}
function flushSchedulerQueue() {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;
  queue.sort(function(a, b) {
    return a.id - b.id;
  });
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn("You may have an infinite update loop " + (watcher.user ? 'in watcher with expression "' + watcher.expression + '"' : "in a component render function."), watcher.vm);
        break;
      }
    }
  }
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();
  resetSchedulerState();
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);
  if (devtools && config.devtools) {
    devtools.emit("flush");
  }
}
function callUpdatedHooks(queue2) {
  var i = queue2.length;
  while (i--) {
    var watcher = queue2[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, "updated");
    }
  }
}
function queueActivatedComponent(vm) {
  vm._inactive = false;
  activatedChildren.push(vm);
}
function callActivatedHooks(queue2) {
  for (var i = 0; i < queue2.length; i++) {
    queue2[i]._inactive = true;
    activateChildComponent(queue2[i], true);
  }
}
function queueWatcher(watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    if (!waiting) {
      waiting = true;
      if (!config.async) {
        flushSchedulerQueue();
        return;
      }
      nextTick(flushSchedulerQueue);
    }
  }
}
function proxy(target2, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter() {
    return this[sourceKey][key];
  };
  sharedPropertyDefinition.set = function proxySetter(val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function initState(vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) {
    initProps(vm, opts.props);
  }
  if (opts.methods) {
    initMethods(vm, opts.methods);
  }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true);
  }
  if (opts.computed) {
    initComputed(vm, opts.computed);
  }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}
function initProps(vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props2 = vm._props = {};
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function(key2) {
    keys.push(key2);
    var value = validateProp(key2, propsOptions, propsData, vm);
    if (true) {
      var hyphenatedKey = hyphenate(key2);
      if (isReservedAttribute(hyphenatedKey) || config.isReservedAttr(hyphenatedKey)) {
        warn('"' + hyphenatedKey + '" is a reserved attribute and cannot be used as component prop.', vm);
      }
      defineReactive$$1(props2, key2, value, function() {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(`Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: "` + key2 + '"', vm);
        }
      });
    } else {
      defineReactive$$1(props2, key2, value);
    }
    if (!(key2 in vm)) {
      proxy(vm, "_props", key2);
    }
  };
  for (var key in propsOptions)
    loop(key);
  toggleObserving(true);
}
function initData(vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === "function" ? getData(data, vm) : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function", vm);
  }
  var keys = Object.keys(data);
  var props2 = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    if (true) {
      if (methods && hasOwn(methods, key)) {
        warn('Method "' + key + '" has already been defined as a data property.', vm);
      }
    }
    if (props2 && hasOwn(props2, key)) {
      warn('The data property "' + key + '" is already declared as a prop. Use prop default value instead.', vm);
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  observe(data, true);
}
function getData(data, vm) {
  pushTarget();
  try {
    return data.call(vm, vm);
  } catch (e) {
    handleError(e, vm, "data()");
    return {};
  } finally {
    popTarget();
  }
}
function initComputed(vm, computed) {
  var watchers = vm._computedWatchers = Object.create(null);
  var isSSR = isServerRendering();
  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === "function" ? userDef : userDef.get;
    if (getter == null) {
      warn('Getter is missing for computed property "' + key + '".', vm);
    }
    if (!isSSR) {
      watchers[key] = new Watcher(vm, getter || noop, noop, computedWatcherOptions);
    }
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else if (true) {
      if (key in vm.$data) {
        warn('The computed property "' + key + '" is already defined in data.', vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn('The computed property "' + key + '" is already defined as a prop.', vm);
      } else if (vm.$options.methods && key in vm.$options.methods) {
        warn('The computed property "' + key + '" is already defined as a method.', vm);
      }
    }
  }
}
function defineComputed(target2, key, userDef) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === "function") {
    sharedPropertyDefinition.get = shouldCache ? createComputedGetter(key) : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get ? shouldCache && userDef.cache !== false ? createComputedGetter(key) : createGetterInvoker(userDef.get) : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function() {
      warn('Computed property "' + key + '" was assigned to but it has no setter.', this);
    };
  }
  Object.defineProperty(target2, key, sharedPropertyDefinition);
}
function createComputedGetter(key) {
  return function computedGetter() {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value;
    }
  };
}
function createGetterInvoker(fn) {
  return function computedGetter() {
    return fn.call(this, this);
  };
}
function initMethods(vm, methods) {
  var props2 = vm.$options.props;
  for (var key in methods) {
    if (true) {
      if (typeof methods[key] !== "function") {
        warn('Method "' + key + '" has type "' + typeof methods[key] + '" in the component definition. Did you reference the function correctly?', vm);
      }
      if (props2 && hasOwn(props2, key)) {
        warn('Method "' + key + '" has already been defined as a prop.', vm);
      }
      if (key in vm && isReserved(key)) {
        warn('Method "' + key + '" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.');
      }
    }
    vm[key] = typeof methods[key] !== "function" ? noop : bind(methods[key], vm);
  }
}
function initWatch(vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}
function createWatcher(vm, expOrFn, handler, options) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === "string") {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options);
}
function stateMixin(Vue2) {
  var dataDef = {};
  dataDef.get = function() {
    return this._data;
  };
  var propsDef = {};
  propsDef.get = function() {
    return this._props;
  };
  if (true) {
    dataDef.set = function() {
      warn("Avoid replacing instance root $data. Use nested data properties instead.", this);
    };
    propsDef.set = function() {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue2.prototype, "$data", dataDef);
  Object.defineProperty(Vue2.prototype, "$props", propsDef);
  Vue2.prototype.$set = set;
  Vue2.prototype.$delete = del;
  Vue2.prototype.$watch = function(expOrFn, cb, options) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options);
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      var info = 'callback for immediate watcher "' + watcher.expression + '"';
      pushTarget();
      invokeWithErrorHandling(cb, vm, [watcher.value], vm, info);
      popTarget();
    }
    return function unwatchFn() {
      watcher.teardown();
    };
  };
}
function initMixin(Vue2) {
  Vue2.prototype._init = function(options) {
    var vm = this;
    vm._uid = uid$3++;
    var startTag, endTag;
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + vm._uid;
      endTag = "vue-perf-end:" + vm._uid;
      mark(startTag);
    }
    vm._isVue = true;
    if (options && options._isComponent) {
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(resolveConstructorOptions(vm.constructor), options || {}, vm);
    }
    if (true) {
      initProxy(vm);
    } else {
      vm._renderProxy = vm;
    }
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, "beforeCreate");
    initInjections(vm);
    initState(vm);
    initProvide(vm);
    callHook(vm, "created");
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure("vue " + vm._name + " init", startTag, endTag);
    }
    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}
function initInternalComponent(vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;
  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;
  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}
function resolveConstructorOptions(Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      Ctor.superOptions = superOptions;
      var modifiedOptions = resolveModifiedOptions(Ctor);
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options;
}
function resolveModifiedOptions(Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) {
        modified = {};
      }
      modified[key] = latest[key];
    }
  }
  return modified;
}
function Vue(options) {
  if (!(this instanceof Vue)) {
    warn("Vue is a constructor and should be called with the `new` keyword");
  }
  this._init(options);
}
function initUse(Vue2) {
  Vue2.use = function(plugin) {
    var installedPlugins = this._installedPlugins || (this._installedPlugins = []);
    if (installedPlugins.indexOf(plugin) > -1) {
      return this;
    }
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === "function") {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === "function") {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this;
  };
}
function initMixin$1(Vue2) {
  Vue2.mixin = function(mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this;
  };
}
function initExtend(Vue2) {
  Vue2.cid = 0;
  var cid = 1;
  Vue2.extend = function(extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId];
    }
    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }
    var Sub = function VueComponent(options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(Super.options, extendOptions);
    Sub["super"] = Super;
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;
    ASSET_TYPES.forEach(function(type) {
      Sub[type] = Super[type];
    });
    if (name) {
      Sub.options.components[name] = Sub;
    }
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);
    cachedCtors[SuperId] = Sub;
    return Sub;
  };
}
function initProps$1(Comp) {
  var props2 = Comp.options.props;
  for (var key in props2) {
    proxy(Comp.prototype, "_props", key);
  }
}
function initComputed$1(Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}
function initAssetRegisters(Vue2) {
  ASSET_TYPES.forEach(function(type) {
    Vue2[type] = function(id, definition) {
      if (!definition) {
        return this.options[type + "s"][id];
      } else {
        if (type === "component") {
          validateComponentName(id);
        }
        if (type === "component" && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === "directive" && typeof definition === "function") {
          definition = { bind: definition, update: definition };
        }
        this.options[type + "s"][id] = definition;
        return definition;
      }
    };
  });
}
function getComponentName(opts) {
  return opts && (opts.Ctor.options.name || opts.tag);
}
function matches(pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1;
  } else if (typeof pattern === "string") {
    return pattern.split(",").indexOf(name) > -1;
  } else if (isRegExp(pattern)) {
    return pattern.test(name);
  }
  return false;
}
function pruneCache(keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var entry = cache[key];
    if (entry) {
      var name = entry.name;
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}
function pruneCacheEntry(cache, key, keys, current) {
  var entry = cache[key];
  if (entry && (!current || entry.tag !== current.tag)) {
    entry.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}
function initGlobalAPI(Vue2) {
  var configDef = {};
  configDef.get = function() {
    return config;
  };
  if (true) {
    configDef.set = function() {
      warn("Do not replace the Vue.config object, set individual fields instead.");
    };
  }
  Object.defineProperty(Vue2, "config", configDef);
  Vue2.util = {
    warn,
    extend,
    mergeOptions,
    defineReactive: defineReactive$$1
  };
  Vue2.set = set;
  Vue2.delete = del;
  Vue2.nextTick = nextTick;
  Vue2.observable = function(obj) {
    observe(obj);
    return obj;
  };
  Vue2.options = Object.create(null);
  ASSET_TYPES.forEach(function(type) {
    Vue2.options[type + "s"] = Object.create(null);
  });
  Vue2.options._base = Vue2;
  extend(Vue2.options.components, builtInComponents);
  initUse(Vue2);
  initMixin$1(Vue2);
  initExtend(Vue2);
  initAssetRegisters(Vue2);
}
function genClassForVnode(vnode) {
  var data = vnode.data;
  var parentNode2 = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode2 = parentNode2.parent)) {
    if (parentNode2 && parentNode2.data) {
      data = mergeClassData(data, parentNode2.data);
    }
  }
  return renderClass(data.staticClass, data.class);
}
function mergeClassData(child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class) ? [child.class, parent.class] : parent.class
  };
}
function renderClass(staticClass, dynamicClass) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass));
  }
  return "";
}
function concat(a, b) {
  return a ? b ? a + " " + b : a : b || "";
}
function stringifyClass(value) {
  if (Array.isArray(value)) {
    return stringifyArray(value);
  }
  if (isObject(value)) {
    return stringifyObject(value);
  }
  if (typeof value === "string") {
    return value;
  }
  return "";
}
function stringifyArray(value) {
  var res = "";
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== "") {
      if (res) {
        res += " ";
      }
      res += stringified;
    }
  }
  return res;
}
function stringifyObject(value) {
  var res = "";
  for (var key in value) {
    if (value[key]) {
      if (res) {
        res += " ";
      }
      res += key;
    }
  }
  return res;
}
function getTagNamespace(tag) {
  if (isSVG(tag)) {
    return "svg";
  }
  if (tag === "math") {
    return "math";
  }
}
function isUnknownElement(tag) {
  if (!inBrowser) {
    return true;
  }
  if (isReservedTag(tag)) {
    return false;
  }
  tag = tag.toLowerCase();
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag];
  }
  var el = document.createElement(tag);
  if (tag.indexOf("-") > -1) {
    return unknownElementCache[tag] = el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;
  } else {
    return unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString());
  }
}
function query(el) {
  if (typeof el === "string") {
    var selected = document.querySelector(el);
    if (!selected) {
      warn("Cannot find element: " + el);
      return document.createElement("div");
    }
    return selected;
  } else {
    return el;
  }
}
function createElement$1(tagName2, vnode) {
  var elm = document.createElement(tagName2);
  if (tagName2 !== "select") {
    return elm;
  }
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== void 0) {
    elm.setAttribute("multiple", "multiple");
  }
  return elm;
}
function createElementNS(namespace, tagName2) {
  return document.createElementNS(namespaceMap[namespace], tagName2);
}
function createTextNode(text) {
  return document.createTextNode(text);
}
function createComment(text) {
  return document.createComment(text);
}
function insertBefore(parentNode2, newNode, referenceNode) {
  parentNode2.insertBefore(newNode, referenceNode);
}
function removeChild(node, child) {
  node.removeChild(child);
}
function appendChild(node, child) {
  node.appendChild(child);
}
function parentNode(node) {
  return node.parentNode;
}
function nextSibling(node) {
  return node.nextSibling;
}
function tagName(node) {
  return node.tagName;
}
function setTextContent(node, text) {
  node.textContent = text;
}
function setStyleScope(node, scopeId) {
  node.setAttribute(scopeId, "");
}
function registerRef(vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) {
    return;
  }
  var vm = vnode.context;
  var ref2 = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref2);
    } else if (refs[key] === ref2) {
      refs[key] = void 0;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref2];
      } else if (refs[key].indexOf(ref2) < 0) {
        refs[key].push(ref2);
      }
    } else {
      refs[key] = ref2;
    }
  }
}
function sameVnode(a, b) {
  return a.key === b.key && a.asyncFactory === b.asyncFactory && (a.tag === b.tag && a.isComment === b.isComment && isDef(a.data) === isDef(b.data) && sameInputType(a, b) || isTrue(a.isAsyncPlaceholder) && isUndef(b.asyncFactory.error));
}
function sameInputType(a, b) {
  if (a.tag !== "input") {
    return true;
  }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB);
}
function createKeyToOldIdx(children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) {
      map[key] = i;
    }
  }
  return map;
}
function createPatchFunction(backend) {
  var i, j;
  var cbs = {};
  var modules2 = backend.modules;
  var nodeOps2 = backend.nodeOps;
  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules2.length; ++j) {
      if (isDef(modules2[j][hooks[i]])) {
        cbs[hooks[i]].push(modules2[j][hooks[i]]);
      }
    }
  }
  function emptyNodeAt(elm) {
    return new VNode(nodeOps2.tagName(elm).toLowerCase(), {}, [], void 0, elm);
  }
  function createRmCb(childElm, listeners) {
    function remove$$12() {
      if (--remove$$12.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$12.listeners = listeners;
    return remove$$12;
  }
  function removeNode(el) {
    var parent = nodeOps2.parentNode(el);
    if (isDef(parent)) {
      nodeOps2.removeChild(parent, el);
    }
  }
  function isUnknownElement$$1(vnode, inVPre) {
    return !inVPre && !vnode.ns && !(config.ignoredElements.length && config.ignoredElements.some(function(ignore) {
      return isRegExp(ignore) ? ignore.test(vnode.tag) : ignore === vnode.tag;
    })) && config.isUnknownElement(vnode.tag);
  }
  var creatingElmInVPre = 0;
  function createElm(vnode, insertedVnodeQueue, parentElm, refElm, nested, ownerArray, index2) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    vnode.isRootInsert = !nested;
    if (createComponent2(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return;
    }
    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      if (true) {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn("Unknown custom element: <" + tag + '> - did you register the component correctly? For recursive components, make sure to provide the "name" option.', vnode.context);
        }
      }
      vnode.elm = vnode.ns ? nodeOps2.createElementNS(vnode.ns, tag) : nodeOps2.createElement(tag, vnode);
      setScope(vnode);
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert2(parentElm, vnode.elm, refElm);
      }
      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps2.createComment(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps2.createTextNode(vnode.text);
      insert2(parentElm, vnode.elm, refElm);
    }
  }
  function createComponent2(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2 = vnode.data;
    if (isDef(i2)) {
      var isReactivated = isDef(vnode.componentInstance) && i2.keepAlive;
      if (isDef(i2 = i2.hook) && isDef(i2 = i2.init)) {
        i2(vnode, false);
      }
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert2(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true;
      }
    }
  }
  function initComponent(vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      registerRef(vnode);
      insertedVnodeQueue.push(vnode);
    }
  }
  function reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm) {
    var i2;
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i2 = innerNode.data) && isDef(i2 = i2.transition)) {
        for (i2 = 0; i2 < cbs.activate.length; ++i2) {
          cbs.activate[i2](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break;
      }
    }
    insert2(parentElm, vnode.elm, refElm);
  }
  function insert2(parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps2.parentNode(ref$$1) === parent) {
          nodeOps2.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps2.appendChild(parent, elm);
      }
    }
  }
  function createChildren(vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      if (true) {
        checkDuplicateKeys(children);
      }
      for (var i2 = 0; i2 < children.length; ++i2) {
        createElm(children[i2], insertedVnodeQueue, vnode.elm, null, true, children, i2);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps2.appendChild(vnode.elm, nodeOps2.createTextNode(String(vnode.text)));
    }
  }
  function isPatchable(vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag);
  }
  function invokeCreateHooks(vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook;
    if (isDef(i)) {
      if (isDef(i.create)) {
        i.create(emptyNode, vnode);
      }
      if (isDef(i.insert)) {
        insertedVnodeQueue.push(vnode);
      }
    }
  }
  function setScope(vnode) {
    var i2;
    if (isDef(i2 = vnode.fnScopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i2 = ancestor.context) && isDef(i2 = i2.$options._scopeId)) {
          nodeOps2.setStyleScope(vnode.elm, i2);
        }
        ancestor = ancestor.parent;
      }
    }
    if (isDef(i2 = activeInstance) && i2 !== vnode.context && i2 !== vnode.fnContext && isDef(i2 = i2.$options._scopeId)) {
      nodeOps2.setStyleScope(vnode.elm, i2);
    }
  }
  function addVnodes(parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }
  function invokeDestroyHook(vnode) {
    var i2, j2;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.destroy)) {
        i2(vnode);
      }
      for (i2 = 0; i2 < cbs.destroy.length; ++i2) {
        cbs.destroy[i2](vnode);
      }
    }
    if (isDef(i2 = vnode.children)) {
      for (j2 = 0; j2 < vnode.children.length; ++j2) {
        invokeDestroyHook(vnode.children[j2]);
      }
    }
  }
  function removeVnodes(vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else {
          removeNode(ch.elm);
        }
      }
    }
  }
  function removeAndInvokeRemoveHook(vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i2;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        rm.listeners += listeners;
      } else {
        rm = createRmCb(vnode.elm, listeners);
      }
      if (isDef(i2 = vnode.componentInstance) && isDef(i2 = i2._vnode) && isDef(i2.data)) {
        removeAndInvokeRemoveHook(i2, rm);
      }
      for (i2 = 0; i2 < cbs.remove.length; ++i2) {
        cbs.remove[i2](vnode, rm);
      }
      if (isDef(i2 = vnode.data.hook) && isDef(i2 = i2.remove)) {
        i2(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }
  function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;
    var canMove = !removeOnly;
    if (true) {
      checkDuplicateKeys(newCh);
    }
    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx];
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) {
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldStartVnode.elm, nodeOps2.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) {
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps2.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) {
          oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);
        }
        idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) {
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = void 0;
            canMove && nodeOps2.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(oldCh, oldStartIdx, oldEndIdx);
    }
  }
  function checkDuplicateKeys(children) {
    var seenKeys = {};
    for (var i2 = 0; i2 < children.length; i2++) {
      var vnode = children[i2];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn("Duplicate keys detected: '" + key + "'. This may cause an update error.", vnode.context);
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }
  function findIdxInOld(node, oldCh, start, end) {
    for (var i2 = start; i2 < end; i2++) {
      var c = oldCh[i2];
      if (isDef(c) && sameVnode(node, c)) {
        return i2;
      }
    }
  }
  function patchVnode(oldVnode, vnode, insertedVnodeQueue, ownerArray, index2, removeOnly) {
    if (oldVnode === vnode) {
      return;
    }
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      vnode = ownerArray[index2] = cloneVNode(vnode);
    }
    var elm = vnode.elm = oldVnode.elm;
    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return;
    }
    if (isTrue(vnode.isStatic) && isTrue(oldVnode.isStatic) && vnode.key === oldVnode.key && (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))) {
      vnode.componentInstance = oldVnode.componentInstance;
      return;
    }
    var i2;
    var data = vnode.data;
    if (isDef(data) && isDef(i2 = data.hook) && isDef(i2 = i2.prepatch)) {
      i2(oldVnode, vnode);
    }
    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i2 = 0; i2 < cbs.update.length; ++i2) {
        cbs.update[i2](oldVnode, vnode);
      }
      if (isDef(i2 = data.hook) && isDef(i2 = i2.update)) {
        i2(oldVnode, vnode);
      }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) {
          updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly);
        }
      } else if (isDef(ch)) {
        if (true) {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) {
          nodeOps2.setTextContent(elm, "");
        }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps2.setTextContent(elm, "");
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps2.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.postpatch)) {
        i2(oldVnode, vnode);
      }
    }
  }
  function invokeInsertHook(vnode, queue2, initial) {
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue2;
    } else {
      for (var i2 = 0; i2 < queue2.length; ++i2) {
        queue2[i2].data.hook.insert(queue2[i2]);
      }
    }
  }
  var hydrationBailed = false;
  var isRenderedModule = makeMap("attrs,class,staticClass,staticStyle,key");
  function hydrate(elm, vnode, insertedVnodeQueue, inVPre) {
    var i2;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || data && data.pre;
    vnode.elm = elm;
    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true;
    }
    if (true) {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false;
      }
    }
    if (isDef(data)) {
      if (isDef(i2 = data.hook) && isDef(i2 = i2.init)) {
        i2(vnode, true);
      }
      if (isDef(i2 = vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        return true;
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          if (isDef(i2 = data) && isDef(i2 = i2.domProps) && isDef(i2 = i2.innerHTML)) {
            if (i2 !== elm.innerHTML) {
              if (typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("server innerHTML: ", i2);
                console.warn("client innerHTML: ", elm.innerHTML);
              }
              return false;
            }
          } else {
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break;
              }
              childNode = childNode.nextSibling;
            }
            if (!childrenMatch || childNode) {
              if (typeof console !== "undefined" && !hydrationBailed) {
                hydrationBailed = true;
                console.warn("Parent: ", elm);
                console.warn("Mismatching childNodes vs. VNodes: ", elm.childNodes, children);
              }
              return false;
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break;
          }
        }
        if (!fullInvoke && data["class"]) {
          traverse(data["class"]);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true;
  }
  function assertNodeMatch(node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf("vue-component") === 0 || !isUnknownElement$$1(vnode, inVPre) && vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase());
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3);
    }
  }
  return function patch2(oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) {
        invokeDestroyHook(oldVnode);
      }
      return;
    }
    var isInitialPatch = false;
    var insertedVnodeQueue = [];
    if (isUndef(oldVnode)) {
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode;
            } else if (true) {
              warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.");
            }
          }
          oldVnode = emptyNodeAt(oldVnode);
        }
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps2.parentNode(oldElm);
        createElm(vnode, insertedVnodeQueue, oldElm._leaveCb ? null : parentElm, nodeOps2.nextSibling(oldElm));
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i2 = 0; i2 < cbs.destroy.length; ++i2) {
              cbs.destroy[i2](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              var insert3 = ancestor.data.hook.insert;
              if (insert3.merged) {
                for (var i$2 = 1; i$2 < insert3.fns.length; i$2++) {
                  insert3.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }
        if (isDef(parentElm)) {
          removeVnodes([oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }
    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm;
  };
}
function updateDirectives(oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}
function _update(oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);
  var dirsWithInsert = [];
  var dirsWithPostpatch = [];
  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      callHook$1(dir, "bind", vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, "update", vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }
  if (dirsWithInsert.length) {
    var callInsert = function() {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], "inserted", vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, "insert", callInsert);
    } else {
      callInsert();
    }
  }
  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, "postpatch", function() {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], "componentUpdated", vnode, oldVnode);
      }
    });
  }
  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        callHook$1(oldDirs[key], "unbind", oldVnode, oldVnode, isDestroy);
      }
    }
  }
}
function normalizeDirectives$1(dirs, vm) {
  var res = Object.create(null);
  if (!dirs) {
    return res;
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, "directives", dir.name, true);
  }
  return res;
}
function getRawDirName(dir) {
  return dir.rawName || dir.name + "." + Object.keys(dir.modifiers || {}).join(".");
}
function callHook$1(dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, "directive " + dir.name + " " + hook + " hook");
    }
  }
}
function updateAttrs(oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return;
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return;
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs2 = vnode.data.attrs || {};
  if (isDef(attrs2.__ob__)) {
    attrs2 = vnode.data.attrs = extend({}, attrs2);
  }
  for (key in attrs2) {
    cur = attrs2[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur, vnode.data.pre);
    }
  }
  if ((isIE || isEdge) && attrs2.value !== oldAttrs.value) {
    setAttr(elm, "value", attrs2.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs2[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}
function setAttr(el, key, value, isInPre) {
  if (isInPre || el.tagName.indexOf("-") > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      value = key === "allowfullscreen" && el.tagName === "EMBED" ? "true" : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}
function baseSetAttr(el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    if (isIE && !isIE9 && el.tagName === "TEXTAREA" && key === "placeholder" && value !== "" && !el.__ieph) {
      var blocker = function(e) {
        e.stopImmediatePropagation();
        el.removeEventListener("input", blocker);
      };
      el.addEventListener("input", blocker);
      el.__ieph = true;
    }
    el.setAttribute(key, value);
  }
}
function updateClass(oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticClass) && isUndef(data.class) && (isUndef(oldData) || isUndef(oldData.staticClass) && isUndef(oldData.class))) {
    return;
  }
  var cls = genClassForVnode(vnode);
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }
  if (cls !== el._prevClass) {
    el.setAttribute("class", cls);
    el._prevClass = cls;
  }
}
function normalizeEvents(on) {
  if (isDef(on[RANGE_TOKEN])) {
    var event = isIE ? "change" : "input";
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}
function createOnceHandler$1(event, handler, capture) {
  var _target = target$1;
  return function onceHandler() {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  };
}
function add$1(name, handler, capture, passive) {
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function(e) {
      if (e.target === e.currentTarget || e.timeStamp >= attachedTimestamp || e.timeStamp <= 0 || e.target.ownerDocument !== document) {
        return original.apply(this, arguments);
      }
    };
  }
  target$1.addEventListener(name, handler, supportsPassive ? { capture, passive } : capture);
}
function remove$2(name, handler, capture, _target) {
  (_target || target$1).removeEventListener(name, handler._wrapper || handler, capture);
}
function updateDOMListeners(oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return;
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = void 0;
}
function updateDOMProps(oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return;
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props2 = vnode.data.domProps || {};
  if (isDef(props2.__ob__)) {
    props2 = vnode.data.domProps = extend({}, props2);
  }
  for (key in oldProps) {
    if (!(key in props2)) {
      elm[key] = "";
    }
  }
  for (key in props2) {
    cur = props2[key];
    if (key === "textContent" || key === "innerHTML") {
      if (vnode.children) {
        vnode.children.length = 0;
      }
      if (cur === oldProps[key]) {
        continue;
      }
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }
    if (key === "value" && elm.tagName !== "PROGRESS") {
      elm._value = cur;
      var strCur = isUndef(cur) ? "" : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === "innerHTML" && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      svgContainer = svgContainer || document.createElement("div");
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (cur !== oldProps[key]) {
      try {
        elm[key] = cur;
      } catch (e) {
      }
    }
  }
}
function shouldUpdateValue(elm, checkVal) {
  return !elm.composing && (elm.tagName === "OPTION" || isNotInFocusAndDirty(elm, checkVal) || isDirtyWithModifiers(elm, checkVal));
}
function isNotInFocusAndDirty(elm, checkVal) {
  var notInFocus = true;
  try {
    notInFocus = document.activeElement !== elm;
  } catch (e) {
  }
  return notInFocus && elm.value !== checkVal;
}
function isDirtyWithModifiers(elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers;
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal);
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim();
    }
  }
  return value !== newVal;
}
function normalizeStyleData(data) {
  var style2 = normalizeStyleBinding(data.style);
  return data.staticStyle ? extend(data.staticStyle, style2) : style2;
}
function normalizeStyleBinding(bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle);
  }
  if (typeof bindingStyle === "string") {
    return parseStyleText(bindingStyle);
  }
  return bindingStyle;
}
function getStyle(vnode, checkChild) {
  var res = {};
  var styleData;
  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data && (styleData = normalizeStyleData(childNode.data))) {
        extend(res, styleData);
      }
    }
  }
  if (styleData = normalizeStyleData(vnode.data)) {
    extend(res, styleData);
  }
  var parentNode2 = vnode;
  while (parentNode2 = parentNode2.parent) {
    if (parentNode2.data && (styleData = normalizeStyleData(parentNode2.data))) {
      extend(res, styleData);
    }
  }
  return res;
}
function updateStyle(oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (isUndef(data.staticStyle) && isUndef(data.style) && isUndef(oldData.staticStyle) && isUndef(oldData.style)) {
    return;
  }
  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};
  var oldStyle = oldStaticStyle || oldStyleBinding;
  var style2 = normalizeStyleBinding(vnode.data.style) || {};
  vnode.data.normalizedStyle = isDef(style2.__ob__) ? extend({}, style2) : style2;
  var newStyle = getStyle(vnode, true);
  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, "");
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      setProp(el, name, cur == null ? "" : cur);
    }
  }
}
function addClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.add(c);
      });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    if (cur.indexOf(" " + cls + " ") < 0) {
      el.setAttribute("class", (cur + cls).trim());
    }
  }
}
function removeClass(el, cls) {
  if (!cls || !(cls = cls.trim())) {
    return;
  }
  if (el.classList) {
    if (cls.indexOf(" ") > -1) {
      cls.split(whitespaceRE).forEach(function(c) {
        return el.classList.remove(c);
      });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute("class");
    }
  } else {
    var cur = " " + (el.getAttribute("class") || "") + " ";
    var tar = " " + cls + " ";
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, " ");
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute("class", cur);
    } else {
      el.removeAttribute("class");
    }
  }
}
function resolveTransition(def$$1) {
  if (!def$$1) {
    return;
  }
  if (typeof def$$1 === "object") {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || "v"));
    }
    extend(res, def$$1);
    return res;
  } else if (typeof def$$1 === "string") {
    return autoCssTransition(def$$1);
  }
}
function nextFrame(fn) {
  raf(function() {
    raf(fn);
  });
}
function addTransitionClass(el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}
function removeTransitionClass(el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}
function whenTransitionEnds(el, expectedType, cb) {
  var ref2 = getTransitionInfo(el, expectedType);
  var type = ref2.type;
  var timeout = ref2.timeout;
  var propCount = ref2.propCount;
  if (!type) {
    return cb();
  }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function() {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function(e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function() {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}
function getTransitionInfo(el, expectedType) {
  var styles = window.getComputedStyle(el);
  var transitionDelays = (styles[transitionProp + "Delay"] || "").split(", ");
  var transitionDurations = (styles[transitionProp + "Duration"] || "").split(", ");
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + "Delay"] || "").split(", ");
  var animationDurations = (styles[animationProp + "Duration"] || "").split(", ");
  var animationTimeout = getTimeout(animationDelays, animationDurations);
  var type;
  var timeout = 0;
  var propCount = 0;
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;
    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;
  }
  var hasTransform = type === TRANSITION && transformRE.test(styles[transitionProp + "Property"]);
  return {
    type,
    timeout,
    propCount,
    hasTransform
  };
}
function getTimeout(delays, durations) {
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }
  return Math.max.apply(null, durations.map(function(d, i) {
    return toMs(d) + toMs(delays[i]);
  }));
}
function toMs(s) {
  return Number(s.slice(0, -1).replace(",", ".")) * 1e3;
}
function enter(vnode, toggleDisplay) {
  var el = vnode.elm;
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return;
  }
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return;
  }
  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter2 = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }
  var isAppear = !context._isMounted || !vnode.isRootInsert;
  if (isAppear && !appear && appear !== "") {
    return;
  }
  var startClass = isAppear && appearClass ? appearClass : enterClass;
  var activeClass = isAppear && appearActiveClass ? appearActiveClass : enterActiveClass;
  var toClass = isAppear && appearToClass ? appearToClass : enterToClass;
  var beforeEnterHook = isAppear ? beforeAppear || beforeEnter : beforeEnter;
  var enterHook = isAppear ? typeof appear === "function" ? appear : enter2 : enter2;
  var afterEnterHook = isAppear ? afterAppear || afterEnter : afterEnter;
  var enterCancelledHook = isAppear ? appearCancelled || enterCancelled : enterCancelled;
  var explicitEnterDuration = toNumber(isObject(duration) ? duration.enter : duration);
  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, "enter", vnode);
  }
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);
  var cb = el._enterCb = once(function() {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });
  if (!vnode.data.show) {
    mergeVNodeHook(vnode, "insert", function() {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode && pendingNode.tag === vnode.tag && pendingNode.elm._leaveCb) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function() {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }
  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }
  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}
function leave(vnode, rm) {
  var el = vnode.elm;
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }
  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm();
  }
  if (isDef(el._leaveCb)) {
    return;
  }
  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave2 = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;
  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave2);
  var explicitLeaveDuration = toNumber(isObject(duration) ? duration.leave : duration);
  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, "leave", vnode);
  }
  var cb = el._leaveCb = once(function() {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });
  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }
  function performLeave() {
    if (cb.cancelled) {
      return;
    }
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[vnode.key] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function() {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave2 && leave2(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}
function checkDuration(val, name, vnode) {
  if (typeof val !== "number") {
    warn("<transition> explicit " + name + " duration is not a valid number - got " + JSON.stringify(val) + ".", vnode.context);
  } else if (isNaN(val)) {
    warn("<transition> explicit " + name + " duration is NaN - the duration expression might be incorrect.", vnode.context);
  }
}
function isValidDuration(val) {
  return typeof val === "number" && !isNaN(val);
}
function getHookArgumentsLength(fn) {
  if (isUndef(fn)) {
    return false;
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    return getHookArgumentsLength(Array.isArray(invokerFns) ? invokerFns[0] : invokerFns);
  } else {
    return (fn._length || fn.length) > 1;
  }
}
function _enter(_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}
function setSelected(el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  if (isIE || isEdge) {
    setTimeout(function() {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}
function actuallySetSelected(el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn('<select multiple v-model="' + binding.expression + '"> expects an Array value for its binding, but got ' + Object.prototype.toString.call(value).slice(8, -1), vm);
    return;
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return;
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}
function hasNoMatchingOption(value, options) {
  return options.every(function(o) {
    return !looseEqual(o, value);
  });
}
function getValue(option) {
  return "_value" in option ? option._value : option.value;
}
function onCompositionStart(e) {
  e.target.composing = true;
}
function onCompositionEnd(e) {
  if (!e.target.composing) {
    return;
  }
  e.target.composing = false;
  trigger(e.target, "input");
}
function trigger(el, type) {
  var e = document.createEvent("HTMLEvents");
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}
function locateNode(vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition) ? locateNode(vnode.componentInstance._vnode) : vnode;
}
function getRealChild(vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children));
  } else {
    return vnode;
  }
}
function extractTransitionData(comp) {
  var data = {};
  var options = comp.$options;
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data;
}
function placeholder(h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h("keep-alive", {
      props: rawChild.componentOptions.propsData
    });
  }
}
function hasParentTransition(vnode) {
  while (vnode = vnode.parent) {
    if (vnode.data.transition) {
      return true;
    }
  }
}
function isSameChild(child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag;
}
function callPendingCbs(c) {
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}
function recordPosition(c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}
function applyTranslation(c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = "0s";
  }
}
var emptyObject, _toString, isBuiltInTag, isReservedAttribute, hasOwnProperty, camelizeRE, camelize, capitalize, hyphenateRE, hyphenate, bind, no, identity, SSR_ATTR, ASSET_TYPES, LIFECYCLE_HOOKS, config, unicodeRegExp, bailRE, hasProto, inBrowser, inWeex, weexPlatform, UA, isIE, isIE9, isEdge, isAndroid, isIOS, isChrome, isPhantomJS, isFF, nativeWatch, supportsPassive, opts, _isServer, isServerRendering, devtools, hasSymbol, _Set, warn, tip, generateComponentTrace, formatComponentName, hasConsole, classifyRE, classify, repeat, uid, Dep, targetStack, VNode, prototypeAccessors, createEmptyVNode, arrayProto, arrayMethods, methodsToPatch, arrayKeys, shouldObserve, Observer, strats, defaultStrat, simpleCheckRE, functionTypeCheckRE, EXPLICABLE_TYPES, isUsingMicroTask, callbacks, pending, timerFunc, p, counter, observer, textNode, initProxy, allowedGlobals, warnNonPresent, warnReservedPrefix, hasProxy, isBuiltInModifier, hasHandler, getHandler, seenObjects, mark, measure, perf, normalizeEvent, componentVNodeHooks, hooksToMerge, SIMPLE_NORMALIZE, ALWAYS_NORMALIZE, currentRenderingInstance, target, activeInstance, isUpdatingChildComponent, MAX_UPDATE_COUNT, queue, activatedChildren, has, circular, waiting, flushing, index, currentFlushTimestamp, getNow, performance, uid$2, Watcher, sharedPropertyDefinition, computedWatcherOptions, uid$3, patternTypes, KeepAlive, builtInComponents, isReservedAttr, acceptValue, mustUseProp, isEnumeratedAttr, isValidContentEditableValue, convertEnumeratedValue, isBooleanAttr, xlinkNS, isXlink, getXlinkProp, isFalsyAttrValue, namespaceMap, isHTMLTag, isSVG, isReservedTag, unknownElementCache, isTextInputType, nodeOps, ref, emptyNode, hooks, directives, emptyModifiers, baseModules, attrs, klass, RANGE_TOKEN, CHECKBOX_RADIO_TOKEN, target$1, useMicrotaskFix, events, svgContainer, domProps, parseStyleText, cssVarRE, importantRE, setProp, vendorNames, emptyStyle, normalize, style, whitespaceRE, autoCssTransition, hasTransition, TRANSITION, ANIMATION, transitionProp, transitionEndEvent, animationProp, animationEndEvent, raf, transformRE, transition, platformModules, modules, patch, directive, show, platformDirectives, transitionProps, isNotTextNode, isVShowDirective, Transition, props, TransitionGroup, platformComponents, vue_runtime_esm_default;
var init_vue_runtime_esm = __esm({
  "node_modules/qrcode-vue3/node_modules/vue/dist/vue.runtime.esm.js"() {
    init_virtual_process_polyfill();
    init_buffer();
    emptyObject = Object.freeze({});
    _toString = Object.prototype.toString;
    isBuiltInTag = makeMap("slot,component", true);
    isReservedAttribute = makeMap("key,ref,slot,slot-scope,is");
    hasOwnProperty = Object.prototype.hasOwnProperty;
    camelizeRE = /-(\w)/g;
    camelize = cached(function(str) {
      return str.replace(camelizeRE, function(_, c) {
        return c ? c.toUpperCase() : "";
      });
    });
    capitalize = cached(function(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    });
    hyphenateRE = /\B([A-Z])/g;
    hyphenate = cached(function(str) {
      return str.replace(hyphenateRE, "-$1").toLowerCase();
    });
    bind = Function.prototype.bind ? nativeBind : polyfillBind;
    no = function(a, b, c) {
      return false;
    };
    identity = function(_) {
      return _;
    };
    SSR_ATTR = "data-server-rendered";
    ASSET_TYPES = [
      "component",
      "directive",
      "filter"
    ];
    LIFECYCLE_HOOKS = [
      "beforeCreate",
      "created",
      "beforeMount",
      "mounted",
      "beforeUpdate",
      "updated",
      "beforeDestroy",
      "destroyed",
      "activated",
      "deactivated",
      "errorCaptured",
      "serverPrefetch"
    ];
    config = {
      optionMergeStrategies: Object.create(null),
      silent: false,
      productionTip: true,
      devtools: true,
      performance: false,
      errorHandler: null,
      warnHandler: null,
      ignoredElements: [],
      keyCodes: Object.create(null),
      isReservedTag: no,
      isReservedAttr: no,
      isUnknownElement: no,
      getTagNamespace: noop,
      parsePlatformTagName: identity,
      mustUseProp: no,
      async: true,
      _lifecycleHooks: LIFECYCLE_HOOKS
    };
    unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;
    bailRE = new RegExp("[^" + unicodeRegExp.source + ".$_\\d]");
    hasProto = "__proto__" in {};
    inBrowser = typeof window !== "undefined";
    inWeex = typeof WXEnvironment !== "undefined" && !!WXEnvironment.platform;
    weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
    UA = inBrowser && window.navigator.userAgent.toLowerCase();
    isIE = UA && /msie|trident/.test(UA);
    isIE9 = UA && UA.indexOf("msie 9.0") > 0;
    isEdge = UA && UA.indexOf("edge/") > 0;
    isAndroid = UA && UA.indexOf("android") > 0 || weexPlatform === "android";
    isIOS = UA && /iphone|ipad|ipod|ios/.test(UA) || weexPlatform === "ios";
    isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
    isPhantomJS = UA && /phantomjs/.test(UA);
    isFF = UA && UA.match(/firefox\/(\d+)/);
    nativeWatch = {}.watch;
    supportsPassive = false;
    if (inBrowser) {
      try {
        opts = {};
        Object.defineProperty(opts, "passive", {
          get: function get3() {
            supportsPassive = true;
          }
        });
        window.addEventListener("test-passive", null, opts);
      } catch (e) {
      }
    }
    isServerRendering = function() {
      if (_isServer === void 0) {
        if (!inBrowser && !inWeex && typeof globalThis !== "undefined") {
          _isServer = globalThis["process"] && globalThis["process"].env.VUE_ENV === "server";
        } else {
          _isServer = false;
        }
      }
      return _isServer;
    };
    devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;
    hasSymbol = typeof Symbol !== "undefined" && isNative(Symbol) && typeof Reflect !== "undefined" && isNative(Reflect.ownKeys);
    if (typeof Set !== "undefined" && isNative(Set)) {
      _Set = Set;
    } else {
      _Set = function() {
        function Set2() {
          this.set = Object.create(null);
        }
        Set2.prototype.has = function has2(key) {
          return this.set[key] === true;
        };
        Set2.prototype.add = function add2(key) {
          this.set[key] = true;
        };
        Set2.prototype.clear = function clear() {
          this.set = Object.create(null);
        };
        return Set2;
      }();
    }
    warn = noop;
    tip = noop;
    generateComponentTrace = noop;
    formatComponentName = noop;
    if (true) {
      hasConsole = typeof console !== "undefined";
      classifyRE = /(?:^|[-_])(\w)/g;
      classify = function(str) {
        return str.replace(classifyRE, function(c) {
          return c.toUpperCase();
        }).replace(/[-_]/g, "");
      };
      warn = function(msg, vm) {
        var trace = vm ? generateComponentTrace(vm) : "";
        if (config.warnHandler) {
          config.warnHandler.call(null, msg, vm, trace);
        } else if (hasConsole && !config.silent) {
          console.error("[Vue warn]: " + msg + trace);
        }
      };
      tip = function(msg, vm) {
        if (hasConsole && !config.silent) {
          console.warn("[Vue tip]: " + msg + (vm ? generateComponentTrace(vm) : ""));
        }
      };
      formatComponentName = function(vm, includeFile) {
        if (vm.$root === vm) {
          return "<Root>";
        }
        var options = typeof vm === "function" && vm.cid != null ? vm.options : vm._isVue ? vm.$options || vm.constructor.options : vm;
        var name = options.name || options._componentTag;
        var file = options.__file;
        if (!name && file) {
          var match = file.match(/([^/\\]+)\.vue$/);
          name = match && match[1];
        }
        return (name ? "<" + classify(name) + ">" : "<Anonymous>") + (file && includeFile !== false ? " at " + file : "");
      };
      repeat = function(str, n) {
        var res = "";
        while (n) {
          if (n % 2 === 1) {
            res += str;
          }
          if (n > 1) {
            str += str;
          }
          n >>= 1;
        }
        return res;
      };
      generateComponentTrace = function(vm) {
        if (vm._isVue && vm.$parent) {
          var tree = [];
          var currentRecursiveSequence = 0;
          while (vm) {
            if (tree.length > 0) {
              var last = tree[tree.length - 1];
              if (last.constructor === vm.constructor) {
                currentRecursiveSequence++;
                vm = vm.$parent;
                continue;
              } else if (currentRecursiveSequence > 0) {
                tree[tree.length - 1] = [last, currentRecursiveSequence];
                currentRecursiveSequence = 0;
              }
            }
            tree.push(vm);
            vm = vm.$parent;
          }
          return "\n\nfound in\n\n" + tree.map(function(vm2, i) {
            return "" + (i === 0 ? "---> " : repeat(" ", 5 + i * 2)) + (Array.isArray(vm2) ? formatComponentName(vm2[0]) + "... (" + vm2[1] + " recursive calls)" : formatComponentName(vm2));
          }).join("\n");
        } else {
          return "\n\n(found in " + formatComponentName(vm) + ")";
        }
      };
    }
    uid = 0;
    Dep = function Dep2() {
      this.id = uid++;
      this.subs = [];
    };
    Dep.prototype.addSub = function addSub(sub) {
      this.subs.push(sub);
    };
    Dep.prototype.removeSub = function removeSub(sub) {
      remove(this.subs, sub);
    };
    Dep.prototype.depend = function depend() {
      if (Dep.target) {
        Dep.target.addDep(this);
      }
    };
    Dep.prototype.notify = function notify() {
      var subs = this.subs.slice();
      if (!config.async) {
        subs.sort(function(a, b) {
          return a.id - b.id;
        });
      }
      for (var i = 0, l = subs.length; i < l; i++) {
        subs[i].update();
      }
    };
    Dep.target = null;
    targetStack = [];
    VNode = function VNode2(tag, data, children, text, elm, context, componentOptions, asyncFactory) {
      this.tag = tag;
      this.data = data;
      this.children = children;
      this.text = text;
      this.elm = elm;
      this.ns = void 0;
      this.context = context;
      this.fnContext = void 0;
      this.fnOptions = void 0;
      this.fnScopeId = void 0;
      this.key = data && data.key;
      this.componentOptions = componentOptions;
      this.componentInstance = void 0;
      this.parent = void 0;
      this.raw = false;
      this.isStatic = false;
      this.isRootInsert = true;
      this.isComment = false;
      this.isCloned = false;
      this.isOnce = false;
      this.asyncFactory = asyncFactory;
      this.asyncMeta = void 0;
      this.isAsyncPlaceholder = false;
    };
    prototypeAccessors = { child: { configurable: true } };
    prototypeAccessors.child.get = function() {
      return this.componentInstance;
    };
    Object.defineProperties(VNode.prototype, prototypeAccessors);
    createEmptyVNode = function(text) {
      if (text === void 0)
        text = "";
      var node = new VNode();
      node.text = text;
      node.isComment = true;
      return node;
    };
    arrayProto = Array.prototype;
    arrayMethods = Object.create(arrayProto);
    methodsToPatch = [
      "push",
      "pop",
      "shift",
      "unshift",
      "splice",
      "sort",
      "reverse"
    ];
    methodsToPatch.forEach(function(method) {
      var original = arrayProto[method];
      def(arrayMethods, method, function mutator() {
        var args = [], len = arguments.length;
        while (len--)
          args[len] = arguments[len];
        var result = original.apply(this, args);
        var ob = this.__ob__;
        var inserted2;
        switch (method) {
          case "push":
          case "unshift":
            inserted2 = args;
            break;
          case "splice":
            inserted2 = args.slice(2);
            break;
        }
        if (inserted2) {
          ob.observeArray(inserted2);
        }
        ob.dep.notify();
        return result;
      });
    });
    arrayKeys = Object.getOwnPropertyNames(arrayMethods);
    shouldObserve = true;
    Observer = function Observer2(value) {
      this.value = value;
      this.dep = new Dep();
      this.vmCount = 0;
      def(value, "__ob__", this);
      if (Array.isArray(value)) {
        if (hasProto) {
          protoAugment(value, arrayMethods);
        } else {
          copyAugment(value, arrayMethods, arrayKeys);
        }
        this.observeArray(value);
      } else {
        this.walk(value);
      }
    };
    Observer.prototype.walk = function walk(obj) {
      var keys = Object.keys(obj);
      for (var i = 0; i < keys.length; i++) {
        defineReactive$$1(obj, keys[i]);
      }
    };
    Observer.prototype.observeArray = function observeArray(items) {
      for (var i = 0, l = items.length; i < l; i++) {
        observe(items[i]);
      }
    };
    strats = config.optionMergeStrategies;
    if (true) {
      strats.el = strats.propsData = function(parent, child, vm, key) {
        if (!vm) {
          warn('option "' + key + '" can only be used during instance creation with the `new` keyword.');
        }
        return defaultStrat(parent, child);
      };
    }
    strats.data = function(parentVal, childVal, vm) {
      if (!vm) {
        if (childVal && typeof childVal !== "function") {
          warn('The "data" option should be a function that returns a per-instance value in component definitions.', vm);
          return parentVal;
        }
        return mergeDataOrFn(parentVal, childVal);
      }
      return mergeDataOrFn(parentVal, childVal, vm);
    };
    LIFECYCLE_HOOKS.forEach(function(hook) {
      strats[hook] = mergeHook;
    });
    ASSET_TYPES.forEach(function(type) {
      strats[type + "s"] = mergeAssets;
    });
    strats.watch = function(parentVal, childVal, vm, key) {
      if (parentVal === nativeWatch) {
        parentVal = void 0;
      }
      if (childVal === nativeWatch) {
        childVal = void 0;
      }
      if (!childVal) {
        return Object.create(parentVal || null);
      }
      if (true) {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) {
        return childVal;
      }
      var ret = {};
      extend(ret, parentVal);
      for (var key$1 in childVal) {
        var parent = ret[key$1];
        var child = childVal[key$1];
        if (parent && !Array.isArray(parent)) {
          parent = [parent];
        }
        ret[key$1] = parent ? parent.concat(child) : Array.isArray(child) ? child : [child];
      }
      return ret;
    };
    strats.props = strats.methods = strats.inject = strats.computed = function(parentVal, childVal, vm, key) {
      if (childVal && true) {
        assertObjectType(key, childVal, vm);
      }
      if (!parentVal) {
        return childVal;
      }
      var ret = Object.create(null);
      extend(ret, parentVal);
      if (childVal) {
        extend(ret, childVal);
      }
      return ret;
    };
    strats.provide = mergeDataOrFn;
    defaultStrat = function(parentVal, childVal) {
      return childVal === void 0 ? parentVal : childVal;
    };
    simpleCheckRE = /^(String|Number|Boolean|Function|Symbol|BigInt)$/;
    functionTypeCheckRE = /^\s*function (\w+)/;
    EXPLICABLE_TYPES = ["string", "number", "boolean"];
    isUsingMicroTask = false;
    callbacks = [];
    pending = false;
    if (typeof Promise !== "undefined" && isNative(Promise)) {
      p = Promise.resolve();
      timerFunc = function() {
        p.then(flushCallbacks);
        if (isIOS) {
          setTimeout(noop);
        }
      };
      isUsingMicroTask = true;
    } else if (!isIE && typeof MutationObserver !== "undefined" && (isNative(MutationObserver) || MutationObserver.toString() === "[object MutationObserverConstructor]")) {
      counter = 1;
      observer = new MutationObserver(flushCallbacks);
      textNode = document.createTextNode(String(counter));
      observer.observe(textNode, {
        characterData: true
      });
      timerFunc = function() {
        counter = (counter + 1) % 2;
        textNode.data = String(counter);
      };
      isUsingMicroTask = true;
    } else if (typeof setImmediate !== "undefined" && isNative(setImmediate)) {
      timerFunc = function() {
        setImmediate(flushCallbacks);
      };
    } else {
      timerFunc = function() {
        setTimeout(flushCallbacks, 0);
      };
    }
    if (true) {
      allowedGlobals = makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require");
      warnNonPresent = function(target2, key) {
        warn('Property or method "' + key + '" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.', target2);
      };
      warnReservedPrefix = function(target2, key) {
        warn('Property "' + key + '" must be accessed with "$data.' + key + '" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data', target2);
      };
      hasProxy = typeof Proxy !== "undefined" && isNative(Proxy);
      if (hasProxy) {
        isBuiltInModifier = makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");
        config.keyCodes = new Proxy(config.keyCodes, {
          set: function set2(target2, key, value) {
            if (isBuiltInModifier(key)) {
              warn("Avoid overwriting built-in modifier in config.keyCodes: ." + key);
              return false;
            } else {
              target2[key] = value;
              return true;
            }
          }
        });
      }
      hasHandler = {
        has: function has2(target2, key) {
          var has3 = key in target2;
          var isAllowed = allowedGlobals(key) || typeof key === "string" && key.charAt(0) === "_" && !(key in target2.$data);
          if (!has3 && !isAllowed) {
            if (key in target2.$data) {
              warnReservedPrefix(target2, key);
            } else {
              warnNonPresent(target2, key);
            }
          }
          return has3 || !isAllowed;
        }
      };
      getHandler = {
        get: function get3(target2, key) {
          if (typeof key === "string" && !(key in target2)) {
            if (key in target2.$data) {
              warnReservedPrefix(target2, key);
            } else {
              warnNonPresent(target2, key);
            }
          }
          return target2[key];
        }
      };
      initProxy = function initProxy2(vm) {
        if (hasProxy) {
          var options = vm.$options;
          var handlers = options.render && options.render._withStripped ? getHandler : hasHandler;
          vm._renderProxy = new Proxy(vm, handlers);
        } else {
          vm._renderProxy = vm;
        }
      };
    }
    seenObjects = new _Set();
    if (true) {
      perf = inBrowser && window.performance;
      if (perf && perf.mark && perf.measure && perf.clearMarks && perf.clearMeasures) {
        mark = function(tag) {
          return perf.mark(tag);
        };
        measure = function(name, startTag, endTag) {
          perf.measure(name, startTag, endTag);
          perf.clearMarks(startTag);
          perf.clearMarks(endTag);
        };
      }
    }
    normalizeEvent = cached(function(name) {
      var passive = name.charAt(0) === "&";
      name = passive ? name.slice(1) : name;
      var once$$1 = name.charAt(0) === "~";
      name = once$$1 ? name.slice(1) : name;
      var capture = name.charAt(0) === "!";
      name = capture ? name.slice(1) : name;
      return {
        name,
        once: once$$1,
        capture,
        passive
      };
    });
    installRenderHelpers(FunctionalRenderContext.prototype);
    componentVNodeHooks = {
      init: function init(vnode, hydrating) {
        if (vnode.componentInstance && !vnode.componentInstance._isDestroyed && vnode.data.keepAlive) {
          var mountedNode = vnode;
          componentVNodeHooks.prepatch(mountedNode, mountedNode);
        } else {
          var child = vnode.componentInstance = createComponentInstanceForVnode(vnode, activeInstance);
          child.$mount(hydrating ? vnode.elm : void 0, hydrating);
        }
      },
      prepatch: function prepatch(oldVnode, vnode) {
        var options = vnode.componentOptions;
        var child = vnode.componentInstance = oldVnode.componentInstance;
        updateChildComponent(child, options.propsData, options.listeners, vnode, options.children);
      },
      insert: function insert(vnode) {
        var context = vnode.context;
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isMounted) {
          componentInstance._isMounted = true;
          callHook(componentInstance, "mounted");
        }
        if (vnode.data.keepAlive) {
          if (context._isMounted) {
            queueActivatedComponent(componentInstance);
          } else {
            activateChildComponent(componentInstance, true);
          }
        }
      },
      destroy: function destroy(vnode) {
        var componentInstance = vnode.componentInstance;
        if (!componentInstance._isDestroyed) {
          if (!vnode.data.keepAlive) {
            componentInstance.$destroy();
          } else {
            deactivateChildComponent(componentInstance, true);
          }
        }
      }
    };
    hooksToMerge = Object.keys(componentVNodeHooks);
    SIMPLE_NORMALIZE = 1;
    ALWAYS_NORMALIZE = 2;
    currentRenderingInstance = null;
    activeInstance = null;
    isUpdatingChildComponent = false;
    MAX_UPDATE_COUNT = 100;
    queue = [];
    activatedChildren = [];
    has = {};
    circular = {};
    waiting = false;
    flushing = false;
    index = 0;
    currentFlushTimestamp = 0;
    getNow = Date.now;
    if (inBrowser && !isIE) {
      performance = window.performance;
      if (performance && typeof performance.now === "function" && getNow() > document.createEvent("Event").timeStamp) {
        getNow = function() {
          return performance.now();
        };
      }
    }
    uid$2 = 0;
    Watcher = function Watcher2(vm, expOrFn, cb, options, isRenderWatcher) {
      this.vm = vm;
      if (isRenderWatcher) {
        vm._watcher = this;
      }
      vm._watchers.push(this);
      if (options) {
        this.deep = !!options.deep;
        this.user = !!options.user;
        this.lazy = !!options.lazy;
        this.sync = !!options.sync;
        this.before = options.before;
      } else {
        this.deep = this.user = this.lazy = this.sync = false;
      }
      this.cb = cb;
      this.id = ++uid$2;
      this.active = true;
      this.dirty = this.lazy;
      this.deps = [];
      this.newDeps = [];
      this.depIds = new _Set();
      this.newDepIds = new _Set();
      this.expression = true ? expOrFn.toString() : "";
      if (typeof expOrFn === "function") {
        this.getter = expOrFn;
      } else {
        this.getter = parsePath(expOrFn);
        if (!this.getter) {
          this.getter = noop;
          warn('Failed watching path: "' + expOrFn + '" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.', vm);
        }
      }
      this.value = this.lazy ? void 0 : this.get();
    };
    Watcher.prototype.get = function get() {
      pushTarget(this);
      var value;
      var vm = this.vm;
      try {
        value = this.getter.call(vm, vm);
      } catch (e) {
        if (this.user) {
          handleError(e, vm, 'getter for watcher "' + this.expression + '"');
        } else {
          throw e;
        }
      } finally {
        if (this.deep) {
          traverse(value);
        }
        popTarget();
        this.cleanupDeps();
      }
      return value;
    };
    Watcher.prototype.addDep = function addDep(dep) {
      var id = dep.id;
      if (!this.newDepIds.has(id)) {
        this.newDepIds.add(id);
        this.newDeps.push(dep);
        if (!this.depIds.has(id)) {
          dep.addSub(this);
        }
      }
    };
    Watcher.prototype.cleanupDeps = function cleanupDeps() {
      var i = this.deps.length;
      while (i--) {
        var dep = this.deps[i];
        if (!this.newDepIds.has(dep.id)) {
          dep.removeSub(this);
        }
      }
      var tmp = this.depIds;
      this.depIds = this.newDepIds;
      this.newDepIds = tmp;
      this.newDepIds.clear();
      tmp = this.deps;
      this.deps = this.newDeps;
      this.newDeps = tmp;
      this.newDeps.length = 0;
    };
    Watcher.prototype.update = function update() {
      if (this.lazy) {
        this.dirty = true;
      } else if (this.sync) {
        this.run();
      } else {
        queueWatcher(this);
      }
    };
    Watcher.prototype.run = function run() {
      if (this.active) {
        var value = this.get();
        if (value !== this.value || isObject(value) || this.deep) {
          var oldValue = this.value;
          this.value = value;
          if (this.user) {
            var info = 'callback for watcher "' + this.expression + '"';
            invokeWithErrorHandling(this.cb, this.vm, [value, oldValue], this.vm, info);
          } else {
            this.cb.call(this.vm, value, oldValue);
          }
        }
      }
    };
    Watcher.prototype.evaluate = function evaluate() {
      this.value = this.get();
      this.dirty = false;
    };
    Watcher.prototype.depend = function depend2() {
      var i = this.deps.length;
      while (i--) {
        this.deps[i].depend();
      }
    };
    Watcher.prototype.teardown = function teardown() {
      if (this.active) {
        if (!this.vm._isBeingDestroyed) {
          remove(this.vm._watchers, this);
        }
        var i = this.deps.length;
        while (i--) {
          this.deps[i].removeSub(this);
        }
        this.active = false;
      }
    };
    sharedPropertyDefinition = {
      enumerable: true,
      configurable: true,
      get: noop,
      set: noop
    };
    computedWatcherOptions = { lazy: true };
    uid$3 = 0;
    initMixin(Vue);
    stateMixin(Vue);
    eventsMixin(Vue);
    lifecycleMixin(Vue);
    renderMixin(Vue);
    patternTypes = [String, RegExp, Array];
    KeepAlive = {
      name: "keep-alive",
      abstract: true,
      props: {
        include: patternTypes,
        exclude: patternTypes,
        max: [String, Number]
      },
      methods: {
        cacheVNode: function cacheVNode() {
          var ref2 = this;
          var cache = ref2.cache;
          var keys = ref2.keys;
          var vnodeToCache = ref2.vnodeToCache;
          var keyToCache = ref2.keyToCache;
          if (vnodeToCache) {
            var tag = vnodeToCache.tag;
            var componentInstance = vnodeToCache.componentInstance;
            var componentOptions = vnodeToCache.componentOptions;
            cache[keyToCache] = {
              name: getComponentName(componentOptions),
              tag,
              componentInstance
            };
            keys.push(keyToCache);
            if (this.max && keys.length > parseInt(this.max)) {
              pruneCacheEntry(cache, keys[0], keys, this._vnode);
            }
            this.vnodeToCache = null;
          }
        }
      },
      created: function created() {
        this.cache = Object.create(null);
        this.keys = [];
      },
      destroyed: function destroyed() {
        for (var key in this.cache) {
          pruneCacheEntry(this.cache, key, this.keys);
        }
      },
      mounted: function mounted() {
        var this$1 = this;
        this.cacheVNode();
        this.$watch("include", function(val) {
          pruneCache(this$1, function(name) {
            return matches(val, name);
          });
        });
        this.$watch("exclude", function(val) {
          pruneCache(this$1, function(name) {
            return !matches(val, name);
          });
        });
      },
      updated: function updated() {
        this.cacheVNode();
      },
      render: function render() {
        var slot = this.$slots.default;
        var vnode = getFirstComponentChild(slot);
        var componentOptions = vnode && vnode.componentOptions;
        if (componentOptions) {
          var name = getComponentName(componentOptions);
          var ref2 = this;
          var include = ref2.include;
          var exclude = ref2.exclude;
          if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {
            return vnode;
          }
          var ref$1 = this;
          var cache = ref$1.cache;
          var keys = ref$1.keys;
          var key = vnode.key == null ? componentOptions.Ctor.cid + (componentOptions.tag ? "::" + componentOptions.tag : "") : vnode.key;
          if (cache[key]) {
            vnode.componentInstance = cache[key].componentInstance;
            remove(keys, key);
            keys.push(key);
          } else {
            this.vnodeToCache = vnode;
            this.keyToCache = key;
          }
          vnode.data.keepAlive = true;
        }
        return vnode || slot && slot[0];
      }
    };
    builtInComponents = {
      KeepAlive
    };
    initGlobalAPI(Vue);
    Object.defineProperty(Vue.prototype, "$isServer", {
      get: isServerRendering
    });
    Object.defineProperty(Vue.prototype, "$ssrContext", {
      get: function get2() {
        return this.$vnode && this.$vnode.ssrContext;
      }
    });
    Object.defineProperty(Vue, "FunctionalRenderContext", {
      value: FunctionalRenderContext
    });
    Vue.version = "2.6.14";
    isReservedAttr = makeMap("style,class");
    acceptValue = makeMap("input,textarea,option,select,progress");
    mustUseProp = function(tag, type, attr) {
      return attr === "value" && acceptValue(tag) && type !== "button" || attr === "selected" && tag === "option" || attr === "checked" && tag === "input" || attr === "muted" && tag === "video";
    };
    isEnumeratedAttr = makeMap("contenteditable,draggable,spellcheck");
    isValidContentEditableValue = makeMap("events,caret,typing,plaintext-only");
    convertEnumeratedValue = function(key, value) {
      return isFalsyAttrValue(value) || value === "false" ? "false" : key === "contenteditable" && isValidContentEditableValue(value) ? value : "true";
    };
    isBooleanAttr = makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible");
    xlinkNS = "http://www.w3.org/1999/xlink";
    isXlink = function(name) {
      return name.charAt(5) === ":" && name.slice(0, 5) === "xlink";
    };
    getXlinkProp = function(name) {
      return isXlink(name) ? name.slice(6, name.length) : "";
    };
    isFalsyAttrValue = function(val) {
      return val == null || val === false;
    };
    namespaceMap = {
      svg: "http://www.w3.org/2000/svg",
      math: "http://www.w3.org/1998/Math/MathML"
    };
    isHTMLTag = makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot");
    isSVG = makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view", true);
    isReservedTag = function(tag) {
      return isHTMLTag(tag) || isSVG(tag);
    };
    unknownElementCache = Object.create(null);
    isTextInputType = makeMap("text,number,password,search,email,tel,url");
    nodeOps = Object.freeze({
      createElement: createElement$1,
      createElementNS,
      createTextNode,
      createComment,
      insertBefore,
      removeChild,
      appendChild,
      parentNode,
      nextSibling,
      tagName,
      setTextContent,
      setStyleScope
    });
    ref = {
      create: function create(_, vnode) {
        registerRef(vnode);
      },
      update: function update2(oldVnode, vnode) {
        if (oldVnode.data.ref !== vnode.data.ref) {
          registerRef(oldVnode, true);
          registerRef(vnode);
        }
      },
      destroy: function destroy2(vnode) {
        registerRef(vnode, true);
      }
    };
    emptyNode = new VNode("", {}, []);
    hooks = ["create", "activate", "update", "remove", "destroy"];
    directives = {
      create: updateDirectives,
      update: updateDirectives,
      destroy: function unbindDirectives(vnode) {
        updateDirectives(vnode, emptyNode);
      }
    };
    emptyModifiers = Object.create(null);
    baseModules = [
      ref,
      directives
    ];
    attrs = {
      create: updateAttrs,
      update: updateAttrs
    };
    klass = {
      create: updateClass,
      update: updateClass
    };
    RANGE_TOKEN = "__r";
    CHECKBOX_RADIO_TOKEN = "__c";
    useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);
    events = {
      create: updateDOMListeners,
      update: updateDOMListeners
    };
    domProps = {
      create: updateDOMProps,
      update: updateDOMProps
    };
    parseStyleText = cached(function(cssText) {
      var res = {};
      var listDelimiter = /;(?![^(]*\))/g;
      var propertyDelimiter = /:(.+)/;
      cssText.split(listDelimiter).forEach(function(item) {
        if (item) {
          var tmp = item.split(propertyDelimiter);
          tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
        }
      });
      return res;
    });
    cssVarRE = /^--/;
    importantRE = /\s*!important$/;
    setProp = function(el, name, val) {
      if (cssVarRE.test(name)) {
        el.style.setProperty(name, val);
      } else if (importantRE.test(val)) {
        el.style.setProperty(hyphenate(name), val.replace(importantRE, ""), "important");
      } else {
        var normalizedName = normalize(name);
        if (Array.isArray(val)) {
          for (var i = 0, len = val.length; i < len; i++) {
            el.style[normalizedName] = val[i];
          }
        } else {
          el.style[normalizedName] = val;
        }
      }
    };
    vendorNames = ["Webkit", "Moz", "ms"];
    normalize = cached(function(prop) {
      emptyStyle = emptyStyle || document.createElement("div").style;
      prop = camelize(prop);
      if (prop !== "filter" && prop in emptyStyle) {
        return prop;
      }
      var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
      for (var i = 0; i < vendorNames.length; i++) {
        var name = vendorNames[i] + capName;
        if (name in emptyStyle) {
          return name;
        }
      }
    });
    style = {
      create: updateStyle,
      update: updateStyle
    };
    whitespaceRE = /\s+/;
    autoCssTransition = cached(function(name) {
      return {
        enterClass: name + "-enter",
        enterToClass: name + "-enter-to",
        enterActiveClass: name + "-enter-active",
        leaveClass: name + "-leave",
        leaveToClass: name + "-leave-to",
        leaveActiveClass: name + "-leave-active"
      };
    });
    hasTransition = inBrowser && !isIE9;
    TRANSITION = "transition";
    ANIMATION = "animation";
    transitionProp = "transition";
    transitionEndEvent = "transitionend";
    animationProp = "animation";
    animationEndEvent = "animationend";
    if (hasTransition) {
      if (window.ontransitionend === void 0 && window.onwebkittransitionend !== void 0) {
        transitionProp = "WebkitTransition";
        transitionEndEvent = "webkitTransitionEnd";
      }
      if (window.onanimationend === void 0 && window.onwebkitanimationend !== void 0) {
        animationProp = "WebkitAnimation";
        animationEndEvent = "webkitAnimationEnd";
      }
    }
    raf = inBrowser ? window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : setTimeout : function(fn) {
      return fn();
    };
    transformRE = /\b(transform|all)(,|$)/;
    transition = inBrowser ? {
      create: _enter,
      activate: _enter,
      remove: function remove$$1(vnode, rm) {
        if (vnode.data.show !== true) {
          leave(vnode, rm);
        } else {
          rm();
        }
      }
    } : {};
    platformModules = [
      attrs,
      klass,
      events,
      domProps,
      style,
      transition
    ];
    modules = platformModules.concat(baseModules);
    patch = createPatchFunction({ nodeOps, modules });
    if (isIE9) {
      document.addEventListener("selectionchange", function() {
        var el = document.activeElement;
        if (el && el.vmodel) {
          trigger(el, "input");
        }
      });
    }
    directive = {
      inserted: function inserted(el, binding, vnode, oldVnode) {
        if (vnode.tag === "select") {
          if (oldVnode.elm && !oldVnode.elm._vOptions) {
            mergeVNodeHook(vnode, "postpatch", function() {
              directive.componentUpdated(el, binding, vnode);
            });
          } else {
            setSelected(el, binding, vnode.context);
          }
          el._vOptions = [].map.call(el.options, getValue);
        } else if (vnode.tag === "textarea" || isTextInputType(el.type)) {
          el._vModifiers = binding.modifiers;
          if (!binding.modifiers.lazy) {
            el.addEventListener("compositionstart", onCompositionStart);
            el.addEventListener("compositionend", onCompositionEnd);
            el.addEventListener("change", onCompositionEnd);
            if (isIE9) {
              el.vmodel = true;
            }
          }
        }
      },
      componentUpdated: function componentUpdated(el, binding, vnode) {
        if (vnode.tag === "select") {
          setSelected(el, binding, vnode.context);
          var prevOptions = el._vOptions;
          var curOptions = el._vOptions = [].map.call(el.options, getValue);
          if (curOptions.some(function(o, i) {
            return !looseEqual(o, prevOptions[i]);
          })) {
            var needReset = el.multiple ? binding.value.some(function(v) {
              return hasNoMatchingOption(v, curOptions);
            }) : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
            if (needReset) {
              trigger(el, "change");
            }
          }
        }
      }
    };
    show = {
      bind: function bind2(el, ref2, vnode) {
        var value = ref2.value;
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        var originalDisplay = el.__vOriginalDisplay = el.style.display === "none" ? "" : el.style.display;
        if (value && transition$$1) {
          vnode.data.show = true;
          enter(vnode, function() {
            el.style.display = originalDisplay;
          });
        } else {
          el.style.display = value ? originalDisplay : "none";
        }
      },
      update: function update3(el, ref2, vnode) {
        var value = ref2.value;
        var oldValue = ref2.oldValue;
        if (!value === !oldValue) {
          return;
        }
        vnode = locateNode(vnode);
        var transition$$1 = vnode.data && vnode.data.transition;
        if (transition$$1) {
          vnode.data.show = true;
          if (value) {
            enter(vnode, function() {
              el.style.display = el.__vOriginalDisplay;
            });
          } else {
            leave(vnode, function() {
              el.style.display = "none";
            });
          }
        } else {
          el.style.display = value ? el.__vOriginalDisplay : "none";
        }
      },
      unbind: function unbind(el, binding, vnode, oldVnode, isDestroy) {
        if (!isDestroy) {
          el.style.display = el.__vOriginalDisplay;
        }
      }
    };
    platformDirectives = {
      model: directive,
      show
    };
    transitionProps = {
      name: String,
      appear: Boolean,
      css: Boolean,
      mode: String,
      type: String,
      enterClass: String,
      leaveClass: String,
      enterToClass: String,
      leaveToClass: String,
      enterActiveClass: String,
      leaveActiveClass: String,
      appearClass: String,
      appearActiveClass: String,
      appearToClass: String,
      duration: [Number, String, Object]
    };
    isNotTextNode = function(c) {
      return c.tag || isAsyncPlaceholder(c);
    };
    isVShowDirective = function(d) {
      return d.name === "show";
    };
    Transition = {
      name: "transition",
      props: transitionProps,
      abstract: true,
      render: function render2(h) {
        var this$1 = this;
        var children = this.$slots.default;
        if (!children) {
          return;
        }
        children = children.filter(isNotTextNode);
        if (!children.length) {
          return;
        }
        if (children.length > 1) {
          warn("<transition> can only be used on a single element. Use <transition-group> for lists.", this.$parent);
        }
        var mode = this.mode;
        if (mode && mode !== "in-out" && mode !== "out-in") {
          warn("invalid <transition> mode: " + mode, this.$parent);
        }
        var rawChild = children[0];
        if (hasParentTransition(this.$vnode)) {
          return rawChild;
        }
        var child = getRealChild(rawChild);
        if (!child) {
          return rawChild;
        }
        if (this._leaving) {
          return placeholder(h, rawChild);
        }
        var id = "__transition-" + this._uid + "-";
        child.key = child.key == null ? child.isComment ? id + "comment" : id + child.tag : isPrimitive(child.key) ? String(child.key).indexOf(id) === 0 ? child.key : id + child.key : child.key;
        var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
        var oldRawChild = this._vnode;
        var oldChild = getRealChild(oldRawChild);
        if (child.data.directives && child.data.directives.some(isVShowDirective)) {
          child.data.show = true;
        }
        if (oldChild && oldChild.data && !isSameChild(child, oldChild) && !isAsyncPlaceholder(oldChild) && !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)) {
          var oldData = oldChild.data.transition = extend({}, data);
          if (mode === "out-in") {
            this._leaving = true;
            mergeVNodeHook(oldData, "afterLeave", function() {
              this$1._leaving = false;
              this$1.$forceUpdate();
            });
            return placeholder(h, rawChild);
          } else if (mode === "in-out") {
            if (isAsyncPlaceholder(child)) {
              return oldRawChild;
            }
            var delayedLeave;
            var performLeave = function() {
              delayedLeave();
            };
            mergeVNodeHook(data, "afterEnter", performLeave);
            mergeVNodeHook(data, "enterCancelled", performLeave);
            mergeVNodeHook(oldData, "delayLeave", function(leave2) {
              delayedLeave = leave2;
            });
          }
        }
        return rawChild;
      }
    };
    props = extend({
      tag: String,
      moveClass: String
    }, transitionProps);
    delete props.mode;
    TransitionGroup = {
      props,
      beforeMount: function beforeMount() {
        var this$1 = this;
        var update4 = this._update;
        this._update = function(vnode, hydrating) {
          var restoreActiveInstance = setActiveInstance(this$1);
          this$1.__patch__(this$1._vnode, this$1.kept, false, true);
          this$1._vnode = this$1.kept;
          restoreActiveInstance();
          update4.call(this$1, vnode, hydrating);
        };
      },
      render: function render3(h) {
        var tag = this.tag || this.$vnode.data.tag || "span";
        var map = Object.create(null);
        var prevChildren = this.prevChildren = this.children;
        var rawChildren = this.$slots.default || [];
        var children = this.children = [];
        var transitionData = extractTransitionData(this);
        for (var i = 0; i < rawChildren.length; i++) {
          var c = rawChildren[i];
          if (c.tag) {
            if (c.key != null && String(c.key).indexOf("__vlist") !== 0) {
              children.push(c);
              map[c.key] = c;
              (c.data || (c.data = {})).transition = transitionData;
            } else if (true) {
              var opts = c.componentOptions;
              var name = opts ? opts.Ctor.options.name || opts.tag || "" : c.tag;
              warn("<transition-group> children must be keyed: <" + name + ">");
            }
          }
        }
        if (prevChildren) {
          var kept = [];
          var removed = [];
          for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
            var c$1 = prevChildren[i$1];
            c$1.data.transition = transitionData;
            c$1.data.pos = c$1.elm.getBoundingClientRect();
            if (map[c$1.key]) {
              kept.push(c$1);
            } else {
              removed.push(c$1);
            }
          }
          this.kept = h(tag, null, kept);
          this.removed = removed;
        }
        return h(tag, null, children);
      },
      updated: function updated2() {
        var children = this.prevChildren;
        var moveClass = this.moveClass || (this.name || "v") + "-move";
        if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
          return;
        }
        children.forEach(callPendingCbs);
        children.forEach(recordPosition);
        children.forEach(applyTranslation);
        this._reflow = document.body.offsetHeight;
        children.forEach(function(c) {
          if (c.data.moved) {
            var el = c.elm;
            var s = el.style;
            addTransitionClass(el, moveClass);
            s.transform = s.WebkitTransform = s.transitionDuration = "";
            el.addEventListener(transitionEndEvent, el._moveCb = function cb(e) {
              if (e && e.target !== el) {
                return;
              }
              if (!e || /transform$/.test(e.propertyName)) {
                el.removeEventListener(transitionEndEvent, cb);
                el._moveCb = null;
                removeTransitionClass(el, moveClass);
              }
            });
          }
        });
      },
      methods: {
        hasMove: function hasMove(el, moveClass) {
          if (!hasTransition) {
            return false;
          }
          if (this._hasMove) {
            return this._hasMove;
          }
          var clone = el.cloneNode();
          if (el._transitionClasses) {
            el._transitionClasses.forEach(function(cls) {
              removeClass(clone, cls);
            });
          }
          addClass(clone, moveClass);
          clone.style.display = "none";
          this.$el.appendChild(clone);
          var info = getTransitionInfo(clone);
          this.$el.removeChild(clone);
          return this._hasMove = info.hasTransform;
        }
      }
    };
    platformComponents = {
      Transition,
      TransitionGroup
    };
    Vue.config.mustUseProp = mustUseProp;
    Vue.config.isReservedTag = isReservedTag;
    Vue.config.isReservedAttr = isReservedAttr;
    Vue.config.getTagNamespace = getTagNamespace;
    Vue.config.isUnknownElement = isUnknownElement;
    extend(Vue.options.directives, platformDirectives);
    extend(Vue.options.components, platformComponents);
    Vue.prototype.__patch__ = inBrowser ? patch : noop;
    Vue.prototype.$mount = function(el, hydrating) {
      el = el && inBrowser ? query(el) : void 0;
      return mountComponent(this, el, hydrating);
    };
    if (inBrowser) {
      setTimeout(function() {
        if (config.devtools) {
          if (devtools) {
            devtools.emit("init", Vue);
          } else if (true) {
            console[console.info ? "info" : "log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools");
          }
        }
        if (config.productionTip !== false && typeof console !== "undefined") {
          console[console.info ? "info" : "log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html");
        }
      }, 0);
    }
    vue_runtime_esm_default = Vue;
  }
});

// node_modules/qrcode-vue3/lib/index.js
var require_lib = __commonJS({
  "node_modules/qrcode-vue3/lib/index.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(t, r) {
      typeof exports == "object" && typeof module == "object" ? module.exports = r((init_vue_runtime_esm(), vue_runtime_esm_exports)) : typeof define == "function" && define.amd ? define(["vue"], r) : typeof exports == "object" ? exports.VQRCodeStyling = r((init_vue_runtime_esm(), vue_runtime_esm_exports)) : t.VQRCodeStyling = r(t.vue);
    }(self, function(t) {
      return (() => {
        var r = { 192: (t2, r2) => {
          var e2, n2, o2 = function() {
            var t3 = function(t4, r4) {
              var e4 = t4, n4 = a[r4], o4 = null, i2 = 0, u2 = null, v2 = [], y2 = {}, x = function(t5, r5) {
                o4 = function(t6) {
                  for (var r6 = new Array(t6), e5 = 0; e5 < t6; e5 += 1) {
                    r6[e5] = new Array(t6);
                    for (var n5 = 0; n5 < t6; n5 += 1)
                      r6[e5][n5] = null;
                  }
                  return r6;
                }(i2 = 4 * e4 + 17), b(0, 0), b(i2 - 7, 0), b(0, i2 - 7), _(), m2(), O(t5, r5), e4 >= 7 && M(t5), u2 == null && (u2 = k(e4, n4, v2)), S(u2, r5);
              }, b = function(t5, r5) {
                for (var e5 = -1; e5 <= 7; e5 += 1)
                  if (!(t5 + e5 <= -1 || i2 <= t5 + e5))
                    for (var n5 = -1; n5 <= 7; n5 += 1)
                      r5 + n5 <= -1 || i2 <= r5 + n5 || (o4[t5 + e5][r5 + n5] = 0 <= e5 && e5 <= 6 && (n5 == 0 || n5 == 6) || 0 <= n5 && n5 <= 6 && (e5 == 0 || e5 == 6) || 2 <= e5 && e5 <= 4 && 2 <= n5 && n5 <= 4);
              }, m2 = function() {
                for (var t5 = 8; t5 < i2 - 8; t5 += 1)
                  o4[t5][6] == null && (o4[t5][6] = t5 % 2 == 0);
                for (var r5 = 8; r5 < i2 - 8; r5 += 1)
                  o4[6][r5] == null && (o4[6][r5] = r5 % 2 == 0);
              }, _ = function() {
                for (var t5 = s.getPatternPosition(e4), r5 = 0; r5 < t5.length; r5 += 1)
                  for (var n5 = 0; n5 < t5.length; n5 += 1) {
                    var i3 = t5[r5], a2 = t5[n5];
                    if (o4[i3][a2] == null)
                      for (var u3 = -2; u3 <= 2; u3 += 1)
                        for (var c2 = -2; c2 <= 2; c2 += 1)
                          o4[i3 + u3][a2 + c2] = u3 == -2 || u3 == 2 || c2 == -2 || c2 == 2 || u3 == 0 && c2 == 0;
                  }
              }, M = function(t5) {
                for (var r5 = s.getBCHTypeNumber(e4), n5 = 0; n5 < 18; n5 += 1) {
                  var a2 = !t5 && (r5 >> n5 & 1) == 1;
                  o4[Math.floor(n5 / 3)][n5 % 3 + i2 - 8 - 3] = a2;
                }
                for (n5 = 0; n5 < 18; n5 += 1)
                  a2 = !t5 && (r5 >> n5 & 1) == 1, o4[n5 % 3 + i2 - 8 - 3][Math.floor(n5 / 3)] = a2;
              }, O = function(t5, r5) {
                for (var e5 = n4 << 3 | r5, a2 = s.getBCHTypeInfo(e5), u3 = 0; u3 < 15; u3 += 1) {
                  var c2 = !t5 && (a2 >> u3 & 1) == 1;
                  u3 < 6 ? o4[u3][8] = c2 : u3 < 8 ? o4[u3 + 1][8] = c2 : o4[i2 - 15 + u3][8] = c2;
                }
                for (u3 = 0; u3 < 15; u3 += 1)
                  c2 = !t5 && (a2 >> u3 & 1) == 1, u3 < 8 ? o4[8][i2 - u3 - 1] = c2 : u3 < 9 ? o4[8][15 - u3 - 1 + 1] = c2 : o4[8][15 - u3 - 1] = c2;
                o4[i2 - 8][8] = !t5;
              }, S = function(t5, r5) {
                for (var e5 = -1, n5 = i2 - 1, a2 = 7, u3 = 0, c2 = s.getMaskFunction(r5), h2 = i2 - 1; h2 > 0; h2 -= 2)
                  for (h2 == 6 && (h2 -= 1); ; ) {
                    for (var f2 = 0; f2 < 2; f2 += 1)
                      if (o4[n5][h2 - f2] == null) {
                        var l2 = false;
                        u3 < t5.length && (l2 = (t5[u3] >>> a2 & 1) == 1), c2(n5, h2 - f2) && (l2 = !l2), o4[n5][h2 - f2] = l2, (a2 -= 1) == -1 && (u3 += 1, a2 = 7);
                      }
                    if ((n5 += e5) < 0 || i2 <= n5) {
                      n5 -= e5, e5 = -e5;
                      break;
                    }
                  }
              }, k = function(t5, r5, e5) {
                for (var n5 = h.getRSBlocks(t5, r5), o5 = f(), i3 = 0; i3 < e5.length; i3 += 1) {
                  var a2 = e5[i3];
                  o5.put(a2.getMode(), 4), o5.put(a2.getLength(), s.getLengthInBits(a2.getMode(), t5)), a2.write(o5);
                }
                var u3 = 0;
                for (i3 = 0; i3 < n5.length; i3 += 1)
                  u3 += n5[i3].dataCount;
                if (o5.getLengthInBits() > 8 * u3)
                  throw "code length overflow. (" + o5.getLengthInBits() + ">" + 8 * u3 + ")";
                for (o5.getLengthInBits() + 4 <= 8 * u3 && o5.put(0, 4); o5.getLengthInBits() % 8 != 0; )
                  o5.putBit(false);
                for (; !(o5.getLengthInBits() >= 8 * u3 || (o5.put(236, 8), o5.getLengthInBits() >= 8 * u3)); )
                  o5.put(17, 8);
                return function(t6, r6) {
                  for (var e6 = 0, n6 = 0, o6 = 0, i4 = new Array(r6.length), a3 = new Array(r6.length), u4 = 0; u4 < r6.length; u4 += 1) {
                    var h2 = r6[u4].dataCount, f2 = r6[u4].totalCount - h2;
                    n6 = Math.max(n6, h2), o6 = Math.max(o6, f2), i4[u4] = new Array(h2);
                    for (var l2 = 0; l2 < i4[u4].length; l2 += 1)
                      i4[u4][l2] = 255 & t6.getBuffer()[l2 + e6];
                    e6 += h2;
                    var d2 = s.getErrorCorrectPolynomial(f2), g2 = c(i4[u4], d2.getLength() - 1).mod(d2);
                    for (a3[u4] = new Array(d2.getLength() - 1), l2 = 0; l2 < a3[u4].length; l2 += 1) {
                      var p2 = l2 + g2.getLength() - a3[u4].length;
                      a3[u4][l2] = p2 >= 0 ? g2.getAt(p2) : 0;
                    }
                  }
                  var v3 = 0;
                  for (l2 = 0; l2 < r6.length; l2 += 1)
                    v3 += r6[l2].totalCount;
                  var y3 = new Array(v3), w2 = 0;
                  for (l2 = 0; l2 < n6; l2 += 1)
                    for (u4 = 0; u4 < r6.length; u4 += 1)
                      l2 < i4[u4].length && (y3[w2] = i4[u4][l2], w2 += 1);
                  for (l2 = 0; l2 < o6; l2 += 1)
                    for (u4 = 0; u4 < r6.length; u4 += 1)
                      l2 < a3[u4].length && (y3[w2] = a3[u4][l2], w2 += 1);
                  return y3;
                }(o5, n5);
              };
              y2.addData = function(t5, r5) {
                var e5 = null;
                switch (r5 = r5 || "Byte") {
                  case "Numeric":
                    e5 = l(t5);
                    break;
                  case "Alphanumeric":
                    e5 = d(t5);
                    break;
                  case "Byte":
                    e5 = g(t5);
                    break;
                  case "Kanji":
                    e5 = p(t5);
                    break;
                  default:
                    throw "mode:" + r5;
                }
                v2.push(e5), u2 = null;
              }, y2.isDark = function(t5, r5) {
                if (t5 < 0 || i2 <= t5 || r5 < 0 || i2 <= r5)
                  throw t5 + "," + r5;
                return o4[t5][r5];
              }, y2.getModuleCount = function() {
                return i2;
              }, y2.make = function() {
                if (e4 < 1) {
                  for (var t5 = 1; t5 < 40; t5++) {
                    for (var r5 = h.getRSBlocks(t5, n4), o5 = f(), i3 = 0; i3 < v2.length; i3++) {
                      var a2 = v2[i3];
                      o5.put(a2.getMode(), 4), o5.put(a2.getLength(), s.getLengthInBits(a2.getMode(), t5)), a2.write(o5);
                    }
                    var u3 = 0;
                    for (i3 = 0; i3 < r5.length; i3++)
                      u3 += r5[i3].dataCount;
                    if (o5.getLengthInBits() <= 8 * u3)
                      break;
                  }
                  e4 = t5;
                }
                x(false, function() {
                  for (var t6 = 0, r6 = 0, e5 = 0; e5 < 8; e5 += 1) {
                    x(true, e5);
                    var n5 = s.getLostPoint(y2);
                    (e5 == 0 || t6 > n5) && (t6 = n5, r6 = e5);
                  }
                  return r6;
                }());
              }, y2.createTableTag = function(t5, r5) {
                t5 = t5 || 2;
                var e5 = "";
                e5 += '<table style="', e5 += " border-width: 0px; border-style: none;", e5 += " border-collapse: collapse;", e5 += " padding: 0px; margin: " + (r5 = r5 === void 0 ? 4 * t5 : r5) + "px;", e5 += '">', e5 += "<tbody>";
                for (var n5 = 0; n5 < y2.getModuleCount(); n5 += 1) {
                  e5 += "<tr>";
                  for (var o5 = 0; o5 < y2.getModuleCount(); o5 += 1)
                    e5 += '<td style="', e5 += " border-width: 0px; border-style: none;", e5 += " border-collapse: collapse;", e5 += " padding: 0px; margin: 0px;", e5 += " width: " + t5 + "px;", e5 += " height: " + t5 + "px;", e5 += " background-color: ", e5 += y2.isDark(n5, o5) ? "#000000" : "#ffffff", e5 += ";", e5 += '"/>';
                  e5 += "</tr>";
                }
                return (e5 += "</tbody>") + "</table>";
              }, y2.createSvgTag = function(t5, r5, e5, n5) {
                var o5 = {};
                typeof arguments[0] == "object" && (t5 = (o5 = arguments[0]).cellSize, r5 = o5.margin, e5 = o5.alt, n5 = o5.title), t5 = t5 || 2, r5 = r5 === void 0 ? 4 * t5 : r5, (e5 = typeof e5 == "string" ? { text: e5 } : e5 || {}).text = e5.text || null, e5.id = e5.text ? e5.id || "qrcode-description" : null, (n5 = typeof n5 == "string" ? { text: n5 } : n5 || {}).text = n5.text || null, n5.id = n5.text ? n5.id || "qrcode-title" : null;
                var i3, a2, s2, u3, c2 = y2.getModuleCount() * t5 + 2 * r5, h2 = "";
                for (u3 = "l" + t5 + ",0 0," + t5 + " -" + t5 + ",0 0,-" + t5 + "z ", h2 += '<svg version="1.1" xmlns="http://www.w3.org/2000/svg"', h2 += o5.scalable ? "" : ' width="' + c2 + 'px" height="' + c2 + 'px"', h2 += ' viewBox="0 0 ' + c2 + " " + c2 + '" ', h2 += ' preserveAspectRatio="xMinYMin meet"', h2 += n5.text || e5.text ? ' role="img" aria-labelledby="' + C([n5.id, e5.id].join(" ").trim()) + '"' : "", h2 += ">", h2 += n5.text ? '<title id="' + C(n5.id) + '">' + C(n5.text) + "</title>" : "", h2 += e5.text ? '<description id="' + C(e5.id) + '">' + C(e5.text) + "</description>" : "", h2 += '<rect width="100%" height="100%" fill="white" cx="0" cy="0"/>', h2 += '<path d="', a2 = 0; a2 < y2.getModuleCount(); a2 += 1)
                  for (s2 = a2 * t5 + r5, i3 = 0; i3 < y2.getModuleCount(); i3 += 1)
                    y2.isDark(a2, i3) && (h2 += "M" + (i3 * t5 + r5) + "," + s2 + u3);
                return (h2 += '" stroke="transparent" fill="black"/>') + "</svg>";
              }, y2.createDataURL = function(t5, r5) {
                t5 = t5 || 2, r5 = r5 === void 0 ? 4 * t5 : r5;
                var e5 = y2.getModuleCount() * t5 + 2 * r5, n5 = r5, o5 = e5 - r5;
                return w(e5, e5, function(r6, e6) {
                  if (n5 <= r6 && r6 < o5 && n5 <= e6 && e6 < o5) {
                    var i3 = Math.floor((r6 - n5) / t5), a2 = Math.floor((e6 - n5) / t5);
                    return y2.isDark(a2, i3) ? 0 : 1;
                  }
                  return 1;
                });
              }, y2.createImgTag = function(t5, r5, e5) {
                t5 = t5 || 2, r5 = r5 === void 0 ? 4 * t5 : r5;
                var n5 = y2.getModuleCount() * t5 + 2 * r5, o5 = "";
                return o5 += "<img", o5 += ' src="', o5 += y2.createDataURL(t5, r5), o5 += '"', o5 += ' width="', o5 += n5, o5 += '"', o5 += ' height="', o5 += n5, o5 += '"', e5 && (o5 += ' alt="', o5 += C(e5), o5 += '"'), o5 + "/>";
              };
              var C = function(t5) {
                for (var r5 = "", e5 = 0; e5 < t5.length; e5 += 1) {
                  var n5 = t5.charAt(e5);
                  switch (n5) {
                    case "<":
                      r5 += "&lt;";
                      break;
                    case ">":
                      r5 += "&gt;";
                      break;
                    case "&":
                      r5 += "&amp;";
                      break;
                    case '"':
                      r5 += "&quot;";
                      break;
                    default:
                      r5 += n5;
                  }
                }
                return r5;
              };
              return y2.createASCII = function(t5, r5) {
                if ((t5 = t5 || 1) < 2)
                  return function(t6) {
                    t6 = t6 === void 0 ? 2 : t6;
                    var r6, e6, n6, o6, i4, a3 = 1 * y2.getModuleCount() + 2 * t6, s3 = t6, u4 = a3 - t6, c3 = { "\u2588\u2588": "\u2588", "\u2588 ": "\u2580", " \u2588": "\u2584", "  ": " " }, h3 = { "\u2588\u2588": "\u2580", "\u2588 ": "\u2580", " \u2588": " ", "  ": " " }, f3 = "";
                    for (r6 = 0; r6 < a3; r6 += 2) {
                      for (n6 = Math.floor((r6 - s3) / 1), o6 = Math.floor((r6 + 1 - s3) / 1), e6 = 0; e6 < a3; e6 += 1)
                        i4 = "\u2588", s3 <= e6 && e6 < u4 && s3 <= r6 && r6 < u4 && y2.isDark(n6, Math.floor((e6 - s3) / 1)) && (i4 = " "), s3 <= e6 && e6 < u4 && s3 <= r6 + 1 && r6 + 1 < u4 && y2.isDark(o6, Math.floor((e6 - s3) / 1)) ? i4 += " " : i4 += "\u2588", f3 += t6 < 1 && r6 + 1 >= u4 ? h3[i4] : c3[i4];
                      f3 += "\n";
                    }
                    return a3 % 2 && t6 > 0 ? f3.substring(0, f3.length - a3 - 1) + Array(a3 + 1).join("\u2580") : f3.substring(0, f3.length - 1);
                  }(r5);
                t5 -= 1, r5 = r5 === void 0 ? 2 * t5 : r5;
                var e5, n5, o5, i3, a2 = y2.getModuleCount() * t5 + 2 * r5, s2 = r5, u3 = a2 - r5, c2 = Array(t5 + 1).join("\u2588\u2588"), h2 = Array(t5 + 1).join("  "), f2 = "", l2 = "";
                for (e5 = 0; e5 < a2; e5 += 1) {
                  for (o5 = Math.floor((e5 - s2) / t5), l2 = "", n5 = 0; n5 < a2; n5 += 1)
                    i3 = 1, s2 <= n5 && n5 < u3 && s2 <= e5 && e5 < u3 && y2.isDark(o5, Math.floor((n5 - s2) / t5)) && (i3 = 0), l2 += i3 ? c2 : h2;
                  for (o5 = 0; o5 < t5; o5 += 1)
                    f2 += l2 + "\n";
                }
                return f2.substring(0, f2.length - 1);
              }, y2.renderTo2dContext = function(t5, r5) {
                r5 = r5 || 2;
                for (var e5 = y2.getModuleCount(), n5 = 0; n5 < e5; n5++)
                  for (var o5 = 0; o5 < e5; o5++)
                    t5.fillStyle = y2.isDark(n5, o5) ? "black" : "white", t5.fillRect(n5 * r5, o5 * r5, r5, r5);
              }, y2;
            };
            t3.stringToBytes = (t3.stringToBytesFuncs = { default: function(t4) {
              for (var r4 = [], e4 = 0; e4 < t4.length; e4 += 1) {
                var n4 = t4.charCodeAt(e4);
                r4.push(255 & n4);
              }
              return r4;
            } }).default, t3.createStringToBytes = function(t4, r4) {
              var e4 = function() {
                for (var e5 = y(t4), n5 = function() {
                  var t5 = e5.read();
                  if (t5 == -1)
                    throw "eof";
                  return t5;
                }, o4 = 0, i2 = {}; ; ) {
                  var a2 = e5.read();
                  if (a2 == -1)
                    break;
                  var s2 = n5(), u2 = n5() << 8 | n5();
                  i2[String.fromCharCode(a2 << 8 | s2)] = u2, o4 += 1;
                }
                if (o4 != r4)
                  throw o4 + " != " + r4;
                return i2;
              }(), n4 = "?".charCodeAt(0);
              return function(t5) {
                for (var r5 = [], o4 = 0; o4 < t5.length; o4 += 1) {
                  var i2 = t5.charCodeAt(o4);
                  if (i2 < 128)
                    r5.push(i2);
                  else {
                    var a2 = e4[t5.charAt(o4)];
                    typeof a2 == "number" ? (255 & a2) == a2 ? r5.push(a2) : (r5.push(a2 >>> 8), r5.push(255 & a2)) : r5.push(n4);
                  }
                }
                return r5;
              };
            };
            var r3, e3, n3, o3, i, a = { L: 1, M: 0, Q: 3, H: 2 }, s = (r3 = [[], [6, 18], [6, 22], [6, 26], [6, 30], [6, 34], [6, 22, 38], [6, 24, 42], [6, 26, 46], [6, 28, 50], [6, 30, 54], [6, 32, 58], [6, 34, 62], [6, 26, 46, 66], [6, 26, 48, 70], [6, 26, 50, 74], [6, 30, 54, 78], [6, 30, 56, 82], [6, 30, 58, 86], [6, 34, 62, 90], [6, 28, 50, 72, 94], [6, 26, 50, 74, 98], [6, 30, 54, 78, 102], [6, 28, 54, 80, 106], [6, 32, 58, 84, 110], [6, 30, 58, 86, 114], [6, 34, 62, 90, 118], [6, 26, 50, 74, 98, 122], [6, 30, 54, 78, 102, 126], [6, 26, 52, 78, 104, 130], [6, 30, 56, 82, 108, 134], [6, 34, 60, 86, 112, 138], [6, 30, 58, 86, 114, 142], [6, 34, 62, 90, 118, 146], [6, 30, 54, 78, 102, 126, 150], [6, 24, 50, 76, 102, 128, 154], [6, 28, 54, 80, 106, 132, 158], [6, 32, 58, 84, 110, 136, 162], [6, 26, 54, 82, 110, 138, 166], [6, 30, 58, 86, 114, 142, 170]], e3 = 1335, n3 = 7973, i = function(t4) {
              for (var r4 = 0; t4 != 0; )
                r4 += 1, t4 >>>= 1;
              return r4;
            }, (o3 = {}).getBCHTypeInfo = function(t4) {
              for (var r4 = t4 << 10; i(r4) - i(e3) >= 0; )
                r4 ^= e3 << i(r4) - i(e3);
              return 21522 ^ (t4 << 10 | r4);
            }, o3.getBCHTypeNumber = function(t4) {
              for (var r4 = t4 << 12; i(r4) - i(n3) >= 0; )
                r4 ^= n3 << i(r4) - i(n3);
              return t4 << 12 | r4;
            }, o3.getPatternPosition = function(t4) {
              return r3[t4 - 1];
            }, o3.getMaskFunction = function(t4) {
              switch (t4) {
                case 0:
                  return function(t5, r4) {
                    return (t5 + r4) % 2 == 0;
                  };
                case 1:
                  return function(t5, r4) {
                    return t5 % 2 == 0;
                  };
                case 2:
                  return function(t5, r4) {
                    return r4 % 3 == 0;
                  };
                case 3:
                  return function(t5, r4) {
                    return (t5 + r4) % 3 == 0;
                  };
                case 4:
                  return function(t5, r4) {
                    return (Math.floor(t5 / 2) + Math.floor(r4 / 3)) % 2 == 0;
                  };
                case 5:
                  return function(t5, r4) {
                    return t5 * r4 % 2 + t5 * r4 % 3 == 0;
                  };
                case 6:
                  return function(t5, r4) {
                    return (t5 * r4 % 2 + t5 * r4 % 3) % 2 == 0;
                  };
                case 7:
                  return function(t5, r4) {
                    return (t5 * r4 % 3 + (t5 + r4) % 2) % 2 == 0;
                  };
                default:
                  throw "bad maskPattern:" + t4;
              }
            }, o3.getErrorCorrectPolynomial = function(t4) {
              for (var r4 = c([1], 0), e4 = 0; e4 < t4; e4 += 1)
                r4 = r4.multiply(c([1, u.gexp(e4)], 0));
              return r4;
            }, o3.getLengthInBits = function(t4, r4) {
              if (1 <= r4 && r4 < 10)
                switch (t4) {
                  case 1:
                    return 10;
                  case 2:
                    return 9;
                  case 4:
                  case 8:
                    return 8;
                  default:
                    throw "mode:" + t4;
                }
              else if (r4 < 27)
                switch (t4) {
                  case 1:
                    return 12;
                  case 2:
                    return 11;
                  case 4:
                    return 16;
                  case 8:
                    return 10;
                  default:
                    throw "mode:" + t4;
                }
              else {
                if (!(r4 < 41))
                  throw "type:" + r4;
                switch (t4) {
                  case 1:
                    return 14;
                  case 2:
                    return 13;
                  case 4:
                    return 16;
                  case 8:
                    return 12;
                  default:
                    throw "mode:" + t4;
                }
              }
            }, o3.getLostPoint = function(t4) {
              for (var r4 = t4.getModuleCount(), e4 = 0, n4 = 0; n4 < r4; n4 += 1)
                for (var o4 = 0; o4 < r4; o4 += 1) {
                  for (var i2 = 0, a2 = t4.isDark(n4, o4), s2 = -1; s2 <= 1; s2 += 1)
                    if (!(n4 + s2 < 0 || r4 <= n4 + s2))
                      for (var u2 = -1; u2 <= 1; u2 += 1)
                        o4 + u2 < 0 || r4 <= o4 + u2 || s2 == 0 && u2 == 0 || a2 == t4.isDark(n4 + s2, o4 + u2) && (i2 += 1);
                  i2 > 5 && (e4 += 3 + i2 - 5);
                }
              for (n4 = 0; n4 < r4 - 1; n4 += 1)
                for (o4 = 0; o4 < r4 - 1; o4 += 1) {
                  var c2 = 0;
                  t4.isDark(n4, o4) && (c2 += 1), t4.isDark(n4 + 1, o4) && (c2 += 1), t4.isDark(n4, o4 + 1) && (c2 += 1), t4.isDark(n4 + 1, o4 + 1) && (c2 += 1), c2 != 0 && c2 != 4 || (e4 += 3);
                }
              for (n4 = 0; n4 < r4; n4 += 1)
                for (o4 = 0; o4 < r4 - 6; o4 += 1)
                  t4.isDark(n4, o4) && !t4.isDark(n4, o4 + 1) && t4.isDark(n4, o4 + 2) && t4.isDark(n4, o4 + 3) && t4.isDark(n4, o4 + 4) && !t4.isDark(n4, o4 + 5) && t4.isDark(n4, o4 + 6) && (e4 += 40);
              for (o4 = 0; o4 < r4; o4 += 1)
                for (n4 = 0; n4 < r4 - 6; n4 += 1)
                  t4.isDark(n4, o4) && !t4.isDark(n4 + 1, o4) && t4.isDark(n4 + 2, o4) && t4.isDark(n4 + 3, o4) && t4.isDark(n4 + 4, o4) && !t4.isDark(n4 + 5, o4) && t4.isDark(n4 + 6, o4) && (e4 += 40);
              var h2 = 0;
              for (o4 = 0; o4 < r4; o4 += 1)
                for (n4 = 0; n4 < r4; n4 += 1)
                  t4.isDark(n4, o4) && (h2 += 1);
              return e4 + Math.abs(100 * h2 / r4 / r4 - 50) / 5 * 10;
            }, o3), u = function() {
              for (var t4 = new Array(256), r4 = new Array(256), e4 = 0; e4 < 8; e4 += 1)
                t4[e4] = 1 << e4;
              for (e4 = 8; e4 < 256; e4 += 1)
                t4[e4] = t4[e4 - 4] ^ t4[e4 - 5] ^ t4[e4 - 6] ^ t4[e4 - 8];
              for (e4 = 0; e4 < 255; e4 += 1)
                r4[t4[e4]] = e4;
              return { glog: function(t5) {
                if (t5 < 1)
                  throw "glog(" + t5 + ")";
                return r4[t5];
              }, gexp: function(r5) {
                for (; r5 < 0; )
                  r5 += 255;
                for (; r5 >= 256; )
                  r5 -= 255;
                return t4[r5];
              } };
            }();
            function c(t4, r4) {
              if (t4.length === void 0)
                throw t4.length + "/" + r4;
              var e4 = function() {
                for (var e5 = 0; e5 < t4.length && t4[e5] == 0; )
                  e5 += 1;
                for (var n5 = new Array(t4.length - e5 + r4), o4 = 0; o4 < t4.length - e5; o4 += 1)
                  n5[o4] = t4[o4 + e5];
                return n5;
              }(), n4 = { getAt: function(t5) {
                return e4[t5];
              }, getLength: function() {
                return e4.length;
              }, multiply: function(t5) {
                for (var r5 = new Array(n4.getLength() + t5.getLength() - 1), e5 = 0; e5 < n4.getLength(); e5 += 1)
                  for (var o4 = 0; o4 < t5.getLength(); o4 += 1)
                    r5[e5 + o4] ^= u.gexp(u.glog(n4.getAt(e5)) + u.glog(t5.getAt(o4)));
                return c(r5, 0);
              }, mod: function(t5) {
                if (n4.getLength() - t5.getLength() < 0)
                  return n4;
                for (var r5 = u.glog(n4.getAt(0)) - u.glog(t5.getAt(0)), e5 = new Array(n4.getLength()), o4 = 0; o4 < n4.getLength(); o4 += 1)
                  e5[o4] = n4.getAt(o4);
                for (o4 = 0; o4 < t5.getLength(); o4 += 1)
                  e5[o4] ^= u.gexp(u.glog(t5.getAt(o4)) + r5);
                return c(e5, 0).mod(t5);
              } };
              return n4;
            }
            var h = function() {
              var t4 = [[1, 26, 19], [1, 26, 16], [1, 26, 13], [1, 26, 9], [1, 44, 34], [1, 44, 28], [1, 44, 22], [1, 44, 16], [1, 70, 55], [1, 70, 44], [2, 35, 17], [2, 35, 13], [1, 100, 80], [2, 50, 32], [2, 50, 24], [4, 25, 9], [1, 134, 108], [2, 67, 43], [2, 33, 15, 2, 34, 16], [2, 33, 11, 2, 34, 12], [2, 86, 68], [4, 43, 27], [4, 43, 19], [4, 43, 15], [2, 98, 78], [4, 49, 31], [2, 32, 14, 4, 33, 15], [4, 39, 13, 1, 40, 14], [2, 121, 97], [2, 60, 38, 2, 61, 39], [4, 40, 18, 2, 41, 19], [4, 40, 14, 2, 41, 15], [2, 146, 116], [3, 58, 36, 2, 59, 37], [4, 36, 16, 4, 37, 17], [4, 36, 12, 4, 37, 13], [2, 86, 68, 2, 87, 69], [4, 69, 43, 1, 70, 44], [6, 43, 19, 2, 44, 20], [6, 43, 15, 2, 44, 16], [4, 101, 81], [1, 80, 50, 4, 81, 51], [4, 50, 22, 4, 51, 23], [3, 36, 12, 8, 37, 13], [2, 116, 92, 2, 117, 93], [6, 58, 36, 2, 59, 37], [4, 46, 20, 6, 47, 21], [7, 42, 14, 4, 43, 15], [4, 133, 107], [8, 59, 37, 1, 60, 38], [8, 44, 20, 4, 45, 21], [12, 33, 11, 4, 34, 12], [3, 145, 115, 1, 146, 116], [4, 64, 40, 5, 65, 41], [11, 36, 16, 5, 37, 17], [11, 36, 12, 5, 37, 13], [5, 109, 87, 1, 110, 88], [5, 65, 41, 5, 66, 42], [5, 54, 24, 7, 55, 25], [11, 36, 12, 7, 37, 13], [5, 122, 98, 1, 123, 99], [7, 73, 45, 3, 74, 46], [15, 43, 19, 2, 44, 20], [3, 45, 15, 13, 46, 16], [1, 135, 107, 5, 136, 108], [10, 74, 46, 1, 75, 47], [1, 50, 22, 15, 51, 23], [2, 42, 14, 17, 43, 15], [5, 150, 120, 1, 151, 121], [9, 69, 43, 4, 70, 44], [17, 50, 22, 1, 51, 23], [2, 42, 14, 19, 43, 15], [3, 141, 113, 4, 142, 114], [3, 70, 44, 11, 71, 45], [17, 47, 21, 4, 48, 22], [9, 39, 13, 16, 40, 14], [3, 135, 107, 5, 136, 108], [3, 67, 41, 13, 68, 42], [15, 54, 24, 5, 55, 25], [15, 43, 15, 10, 44, 16], [4, 144, 116, 4, 145, 117], [17, 68, 42], [17, 50, 22, 6, 51, 23], [19, 46, 16, 6, 47, 17], [2, 139, 111, 7, 140, 112], [17, 74, 46], [7, 54, 24, 16, 55, 25], [34, 37, 13], [4, 151, 121, 5, 152, 122], [4, 75, 47, 14, 76, 48], [11, 54, 24, 14, 55, 25], [16, 45, 15, 14, 46, 16], [6, 147, 117, 4, 148, 118], [6, 73, 45, 14, 74, 46], [11, 54, 24, 16, 55, 25], [30, 46, 16, 2, 47, 17], [8, 132, 106, 4, 133, 107], [8, 75, 47, 13, 76, 48], [7, 54, 24, 22, 55, 25], [22, 45, 15, 13, 46, 16], [10, 142, 114, 2, 143, 115], [19, 74, 46, 4, 75, 47], [28, 50, 22, 6, 51, 23], [33, 46, 16, 4, 47, 17], [8, 152, 122, 4, 153, 123], [22, 73, 45, 3, 74, 46], [8, 53, 23, 26, 54, 24], [12, 45, 15, 28, 46, 16], [3, 147, 117, 10, 148, 118], [3, 73, 45, 23, 74, 46], [4, 54, 24, 31, 55, 25], [11, 45, 15, 31, 46, 16], [7, 146, 116, 7, 147, 117], [21, 73, 45, 7, 74, 46], [1, 53, 23, 37, 54, 24], [19, 45, 15, 26, 46, 16], [5, 145, 115, 10, 146, 116], [19, 75, 47, 10, 76, 48], [15, 54, 24, 25, 55, 25], [23, 45, 15, 25, 46, 16], [13, 145, 115, 3, 146, 116], [2, 74, 46, 29, 75, 47], [42, 54, 24, 1, 55, 25], [23, 45, 15, 28, 46, 16], [17, 145, 115], [10, 74, 46, 23, 75, 47], [10, 54, 24, 35, 55, 25], [19, 45, 15, 35, 46, 16], [17, 145, 115, 1, 146, 116], [14, 74, 46, 21, 75, 47], [29, 54, 24, 19, 55, 25], [11, 45, 15, 46, 46, 16], [13, 145, 115, 6, 146, 116], [14, 74, 46, 23, 75, 47], [44, 54, 24, 7, 55, 25], [59, 46, 16, 1, 47, 17], [12, 151, 121, 7, 152, 122], [12, 75, 47, 26, 76, 48], [39, 54, 24, 14, 55, 25], [22, 45, 15, 41, 46, 16], [6, 151, 121, 14, 152, 122], [6, 75, 47, 34, 76, 48], [46, 54, 24, 10, 55, 25], [2, 45, 15, 64, 46, 16], [17, 152, 122, 4, 153, 123], [29, 74, 46, 14, 75, 47], [49, 54, 24, 10, 55, 25], [24, 45, 15, 46, 46, 16], [4, 152, 122, 18, 153, 123], [13, 74, 46, 32, 75, 47], [48, 54, 24, 14, 55, 25], [42, 45, 15, 32, 46, 16], [20, 147, 117, 4, 148, 118], [40, 75, 47, 7, 76, 48], [43, 54, 24, 22, 55, 25], [10, 45, 15, 67, 46, 16], [19, 148, 118, 6, 149, 119], [18, 75, 47, 31, 76, 48], [34, 54, 24, 34, 55, 25], [20, 45, 15, 61, 46, 16]], r4 = function(t5, r5) {
                var e5 = {};
                return e5.totalCount = t5, e5.dataCount = r5, e5;
              }, e4 = { getRSBlocks: function(e5, n4) {
                var o4 = function(r5, e6) {
                  switch (e6) {
                    case a.L:
                      return t4[4 * (r5 - 1) + 0];
                    case a.M:
                      return t4[4 * (r5 - 1) + 1];
                    case a.Q:
                      return t4[4 * (r5 - 1) + 2];
                    case a.H:
                      return t4[4 * (r5 - 1) + 3];
                    default:
                      return;
                  }
                }(e5, n4);
                if (o4 === void 0)
                  throw "bad rs block @ typeNumber:" + e5 + "/errorCorrectionLevel:" + n4;
                for (var i2 = o4.length / 3, s2 = [], u2 = 0; u2 < i2; u2 += 1)
                  for (var c2 = o4[3 * u2 + 0], h2 = o4[3 * u2 + 1], f2 = o4[3 * u2 + 2], l2 = 0; l2 < c2; l2 += 1)
                    s2.push(r4(h2, f2));
                return s2;
              } };
              return e4;
            }(), f = function() {
              var t4 = [], r4 = 0, e4 = { getBuffer: function() {
                return t4;
              }, getAt: function(r5) {
                var e5 = Math.floor(r5 / 8);
                return (t4[e5] >>> 7 - r5 % 8 & 1) == 1;
              }, put: function(t5, r5) {
                for (var n4 = 0; n4 < r5; n4 += 1)
                  e4.putBit((t5 >>> r5 - n4 - 1 & 1) == 1);
              }, getLengthInBits: function() {
                return r4;
              }, putBit: function(e5) {
                var n4 = Math.floor(r4 / 8);
                t4.length <= n4 && t4.push(0), e5 && (t4[n4] |= 128 >>> r4 % 8), r4 += 1;
              } };
              return e4;
            }, l = function(t4) {
              var r4 = t4, e4 = { getMode: function() {
                return 1;
              }, getLength: function(t5) {
                return r4.length;
              }, write: function(t5) {
                for (var e5 = r4, o5 = 0; o5 + 2 < e5.length; )
                  t5.put(n4(e5.substring(o5, o5 + 3)), 10), o5 += 3;
                o5 < e5.length && (e5.length - o5 == 1 ? t5.put(n4(e5.substring(o5, o5 + 1)), 4) : e5.length - o5 == 2 && t5.put(n4(e5.substring(o5, o5 + 2)), 7));
              } }, n4 = function(t5) {
                for (var r5 = 0, e5 = 0; e5 < t5.length; e5 += 1)
                  r5 = 10 * r5 + o4(t5.charAt(e5));
                return r5;
              }, o4 = function(t5) {
                if ("0" <= t5 && t5 <= "9")
                  return t5.charCodeAt(0) - "0".charCodeAt(0);
                throw "illegal char :" + t5;
              };
              return e4;
            }, d = function(t4) {
              var r4 = t4, e4 = { getMode: function() {
                return 2;
              }, getLength: function(t5) {
                return r4.length;
              }, write: function(t5) {
                for (var e5 = r4, o4 = 0; o4 + 1 < e5.length; )
                  t5.put(45 * n4(e5.charAt(o4)) + n4(e5.charAt(o4 + 1)), 11), o4 += 2;
                o4 < e5.length && t5.put(n4(e5.charAt(o4)), 6);
              } }, n4 = function(t5) {
                if ("0" <= t5 && t5 <= "9")
                  return t5.charCodeAt(0) - "0".charCodeAt(0);
                if ("A" <= t5 && t5 <= "Z")
                  return t5.charCodeAt(0) - "A".charCodeAt(0) + 10;
                switch (t5) {
                  case " ":
                    return 36;
                  case "$":
                    return 37;
                  case "%":
                    return 38;
                  case "*":
                    return 39;
                  case "+":
                    return 40;
                  case "-":
                    return 41;
                  case ".":
                    return 42;
                  case "/":
                    return 43;
                  case ":":
                    return 44;
                  default:
                    throw "illegal char :" + t5;
                }
              };
              return e4;
            }, g = function(r4) {
              var e4 = t3.stringToBytes(r4);
              return { getMode: function() {
                return 4;
              }, getLength: function(t4) {
                return e4.length;
              }, write: function(t4) {
                for (var r5 = 0; r5 < e4.length; r5 += 1)
                  t4.put(e4[r5], 8);
              } };
            }, p = function(r4) {
              var e4 = t3.stringToBytesFuncs.SJIS;
              if (!e4)
                throw "sjis not supported.";
              !function(t4, r5) {
                var n5 = e4("\u53CB");
                if (n5.length != 2 || (n5[0] << 8 | n5[1]) != 38726)
                  throw "sjis not supported.";
              }();
              var n4 = e4(r4);
              return { getMode: function() {
                return 8;
              }, getLength: function(t4) {
                return ~~(n4.length / 2);
              }, write: function(t4) {
                for (var r5 = n4, e5 = 0; e5 + 1 < r5.length; ) {
                  var o4 = (255 & r5[e5]) << 8 | 255 & r5[e5 + 1];
                  if (33088 <= o4 && o4 <= 40956)
                    o4 -= 33088;
                  else {
                    if (!(57408 <= o4 && o4 <= 60351))
                      throw "illegal char at " + (e5 + 1) + "/" + o4;
                    o4 -= 49472;
                  }
                  o4 = 192 * (o4 >>> 8 & 255) + (255 & o4), t4.put(o4, 13), e5 += 2;
                }
                if (e5 < r5.length)
                  throw "illegal char at " + (e5 + 1);
              } };
            }, v = function() {
              var t4 = [], r4 = { writeByte: function(r5) {
                t4.push(255 & r5);
              }, writeShort: function(t5) {
                r4.writeByte(t5), r4.writeByte(t5 >>> 8);
              }, writeBytes: function(t5, e4, n4) {
                e4 = e4 || 0, n4 = n4 || t5.length;
                for (var o4 = 0; o4 < n4; o4 += 1)
                  r4.writeByte(t5[o4 + e4]);
              }, writeString: function(t5) {
                for (var e4 = 0; e4 < t5.length; e4 += 1)
                  r4.writeByte(t5.charCodeAt(e4));
              }, toByteArray: function() {
                return t4;
              }, toString: function() {
                var r5 = "";
                r5 += "[";
                for (var e4 = 0; e4 < t4.length; e4 += 1)
                  e4 > 0 && (r5 += ","), r5 += t4[e4];
                return r5 + "]";
              } };
              return r4;
            }, y = function(t4) {
              var r4 = t4, e4 = 0, n4 = 0, o4 = 0, i2 = { read: function() {
                for (; o4 < 8; ) {
                  if (e4 >= r4.length) {
                    if (o4 == 0)
                      return -1;
                    throw "unexpected end of file./" + o4;
                  }
                  var t5 = r4.charAt(e4);
                  if (e4 += 1, t5 == "=")
                    return o4 = 0, -1;
                  t5.match(/^\s$/) || (n4 = n4 << 6 | a2(t5.charCodeAt(0)), o4 += 6);
                }
                var i3 = n4 >>> o4 - 8 & 255;
                return o4 -= 8, i3;
              } }, a2 = function(t5) {
                if (65 <= t5 && t5 <= 90)
                  return t5 - 65;
                if (97 <= t5 && t5 <= 122)
                  return t5 - 97 + 26;
                if (48 <= t5 && t5 <= 57)
                  return t5 - 48 + 52;
                if (t5 == 43)
                  return 62;
                if (t5 == 47)
                  return 63;
                throw "c:" + t5;
              };
              return i2;
            }, w = function(t4, r4, e4) {
              for (var n4 = function(t5, r5) {
                var e5 = t5, n5 = r5, o5 = new Array(t5 * r5), i3 = { setPixel: function(t6, r6, n6) {
                  o5[r6 * e5 + t6] = n6;
                }, write: function(t6) {
                  t6.writeString("GIF87a"), t6.writeShort(e5), t6.writeShort(n5), t6.writeByte(128), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(0), t6.writeByte(255), t6.writeByte(255), t6.writeByte(255), t6.writeString(","), t6.writeShort(0), t6.writeShort(0), t6.writeShort(e5), t6.writeShort(n5), t6.writeByte(0);
                  var r6 = a3(2);
                  t6.writeByte(2);
                  for (var o6 = 0; r6.length - o6 > 255; )
                    t6.writeByte(255), t6.writeBytes(r6, o6, 255), o6 += 255;
                  t6.writeByte(r6.length - o6), t6.writeBytes(r6, o6, r6.length - o6), t6.writeByte(0), t6.writeString(";");
                } }, a3 = function(t6) {
                  for (var r6 = 1 << t6, e6 = 1 + (1 << t6), n6 = t6 + 1, i4 = s3(), a4 = 0; a4 < r6; a4 += 1)
                    i4.add(String.fromCharCode(a4));
                  i4.add(String.fromCharCode(r6)), i4.add(String.fromCharCode(e6));
                  var u3, c3, h2, f2 = v(), l2 = (u3 = f2, c3 = 0, h2 = 0, { write: function(t7, r7) {
                    if (t7 >>> r7 != 0)
                      throw "length over";
                    for (; c3 + r7 >= 8; )
                      u3.writeByte(255 & (t7 << c3 | h2)), r7 -= 8 - c3, t7 >>>= 8 - c3, h2 = 0, c3 = 0;
                    h2 |= t7 << c3, c3 += r7;
                  }, flush: function() {
                    c3 > 0 && u3.writeByte(h2);
                  } });
                  l2.write(r6, n6);
                  var d2 = 0, g2 = String.fromCharCode(o5[d2]);
                  for (d2 += 1; d2 < o5.length; ) {
                    var p2 = String.fromCharCode(o5[d2]);
                    d2 += 1, i4.contains(g2 + p2) ? g2 += p2 : (l2.write(i4.indexOf(g2), n6), i4.size() < 4095 && (i4.size() == 1 << n6 && (n6 += 1), i4.add(g2 + p2)), g2 = p2);
                  }
                  return l2.write(i4.indexOf(g2), n6), l2.write(e6, n6), l2.flush(), f2.toByteArray();
                }, s3 = function() {
                  var t6 = {}, r6 = 0, e6 = { add: function(n6) {
                    if (e6.contains(n6))
                      throw "dup key:" + n6;
                    t6[n6] = r6, r6 += 1;
                  }, size: function() {
                    return r6;
                  }, indexOf: function(r7) {
                    return t6[r7];
                  }, contains: function(r7) {
                    return t6[r7] !== void 0;
                  } };
                  return e6;
                };
                return i3;
              }(t4, r4), o4 = 0; o4 < r4; o4 += 1)
                for (var i2 = 0; i2 < t4; i2 += 1)
                  n4.setPixel(i2, o4, e4(i2, o4));
              var a2 = v();
              n4.write(a2);
              for (var s2 = function() {
                var t5 = 0, r5 = 0, e5 = 0, n5 = "", o5 = {}, i3 = function(t6) {
                  n5 += String.fromCharCode(a3(63 & t6));
                }, a3 = function(t6) {
                  if (t6 < 0)
                    ;
                  else {
                    if (t6 < 26)
                      return 65 + t6;
                    if (t6 < 52)
                      return t6 - 26 + 97;
                    if (t6 < 62)
                      return t6 - 52 + 48;
                    if (t6 == 62)
                      return 43;
                    if (t6 == 63)
                      return 47;
                  }
                  throw "n:" + t6;
                };
                return o5.writeByte = function(n6) {
                  for (t5 = t5 << 8 | 255 & n6, r5 += 8, e5 += 1; r5 >= 6; )
                    i3(t5 >>> r5 - 6), r5 -= 6;
                }, o5.flush = function() {
                  if (r5 > 0 && (i3(t5 << 6 - r5), t5 = 0, r5 = 0), e5 % 3 != 0)
                    for (var o6 = 3 - e5 % 3, a4 = 0; a4 < o6; a4 += 1)
                      n5 += "=";
                }, o5.toString = function() {
                  return n5;
                }, o5;
              }(), u2 = a2.toByteArray(), c2 = 0; c2 < u2.length; c2 += 1)
                s2.writeByte(u2[c2]);
              return s2.flush(), "data:image/gif;base64," + s2;
            };
            return t3;
          }();
          o2.stringToBytesFuncs["UTF-8"] = function(t3) {
            return function(t4) {
              for (var r3 = [], e3 = 0; e3 < t4.length; e3++) {
                var n3 = t4.charCodeAt(e3);
                n3 < 128 ? r3.push(n3) : n3 < 2048 ? r3.push(192 | n3 >> 6, 128 | 63 & n3) : n3 < 55296 || n3 >= 57344 ? r3.push(224 | n3 >> 12, 128 | n3 >> 6 & 63, 128 | 63 & n3) : (e3++, n3 = 65536 + ((1023 & n3) << 10 | 1023 & t4.charCodeAt(e3)), r3.push(240 | n3 >> 18, 128 | n3 >> 12 & 63, 128 | n3 >> 6 & 63, 128 | 63 & n3));
              }
              return r3;
            }(t3);
          }, (n2 = typeof (e2 = function() {
            return o2;
          }) == "function" ? e2.apply(r2, []) : e2) === void 0 || (t2.exports = n2);
        }, 103: (r2) => {
          "use strict";
          r2.exports = t;
        } }, e = {};
        function n(t2) {
          var o2 = e[t2];
          if (o2 !== void 0)
            return o2.exports;
          var i = e[t2] = { exports: {} };
          return r[t2](i, i.exports, n), i.exports;
        }
        n.n = (t2) => {
          var r2 = t2 && t2.__esModule ? () => t2.default : () => t2;
          return n.d(r2, { a: r2 }), r2;
        }, n.d = (t2, r2) => {
          for (var e2 in r2)
            n.o(r2, e2) && !n.o(t2, e2) && Object.defineProperty(t2, e2, { enumerable: true, get: r2[e2] });
        }, n.o = (t2, r2) => Object.prototype.hasOwnProperty.call(t2, r2);
        var o = {};
        return (() => {
          "use strict";
          n.d(o, { default: () => D });
          var t2 = n(103);
          const r2 = { key: 1 };
          var e2 = function() {
            return (e2 = Object.assign || function(t3) {
              for (var r3, e3 = 1, n2 = arguments.length; e3 < n2; e3++)
                for (var o2 in r3 = arguments[e3])
                  Object.prototype.hasOwnProperty.call(r3, o2) && (t3[o2] = r3[o2]);
              return t3;
            }).apply(this, arguments);
          }, i = function(t3, r3) {
            for (var e3 = 0, n2 = r3.length, o2 = t3.length; e3 < n2; e3++, o2++)
              t3[o2] = r3[e3];
            return t3;
          }, a = function(t3) {
            return !!t3 && typeof t3 == "object" && !Array.isArray(t3);
          };
          function s(t3) {
            for (var r3 = [], n2 = 1; n2 < arguments.length; n2++)
              r3[n2 - 1] = arguments[n2];
            if (!r3.length)
              return t3;
            var o2 = r3.shift();
            return o2 !== void 0 && a(t3) && a(o2) ? (t3 = e2({}, t3), Object.keys(o2).forEach(function(r4) {
              var e3 = t3[r4], n3 = o2[r4];
              Array.isArray(e3) && Array.isArray(n3) ? t3[r4] = n3 : a(e3) && a(n3) ? t3[r4] = s(Object.assign({}, e3), n3) : t3[r4] = n3;
            }), s.apply(void 0, i([t3], r3))) : t3;
          }
          const u = { L: 0.07, M: 0.15, Q: 0.25, H: 0.3 };
          var c = function() {
            return (c = Object.assign || function(t3) {
              for (var r3, e3 = 1, n2 = arguments.length; e3 < n2; e3++)
                for (var o2 in r3 = arguments[e3])
                  Object.prototype.hasOwnProperty.call(r3, o2) && (t3[o2] = r3[o2]);
              return t3;
            }).apply(this, arguments);
          };
          const h = function() {
            function t3(t4) {
              var r3 = t4.context, e3 = t4.type;
              this._context = r3, this._type = e3;
            }
            return t3.prototype.draw = function(t4, r3, e3, n2) {
              var o2, i2 = this._context;
              switch (this._type) {
                case "dots":
                  o2 = this._drawDot;
                  break;
                case "classy":
                  o2 = this._drawClassy;
                  break;
                case "classy-rounded":
                  o2 = this._drawClassyRounded;
                  break;
                case "rounded":
                  o2 = this._drawRounded;
                  break;
                case "extra-rounded":
                  o2 = this._drawExtraRounded;
                  break;
                case "square":
                default:
                  o2 = this._drawSquare;
              }
              o2.call(this, { x: t4, y: r3, size: e3, context: i2, getNeighbor: n2 });
            }, t3.prototype._rotateFigure = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation, a2 = t4.draw, s2 = r3 + n2 / 2, u2 = e3 + n2 / 2;
              o2.translate(s2, u2), i2 && o2.rotate(i2), a2(), o2.closePath(), i2 && o2.rotate(-i2), o2.translate(-s2, -u2);
            }, t3.prototype._basicDot = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, 0, 2 * Math.PI);
              } }));
            }, t3.prototype._basicSquare = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.rect(-r3 / 2, -r3 / 2, r3, r3);
              } }));
            }, t3.prototype._basicSideRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, -Math.PI / 2, Math.PI / 2), e3.lineTo(-r3 / 2, r3 / 2), e3.lineTo(-r3 / 2, -r3 / 2), e3.lineTo(0, -r3 / 2);
              } }));
            }, t3.prototype._basicCornerRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, -Math.PI / 2, 0), e3.lineTo(r3 / 2, r3 / 2), e3.lineTo(-r3 / 2, r3 / 2), e3.lineTo(-r3 / 2, -r3 / 2), e3.lineTo(0, -r3 / 2);
              } }));
            }, t3.prototype._basicCornerExtraRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(-r3 / 2, r3 / 2, r3, -Math.PI / 2, 0), e3.lineTo(-r3 / 2, r3 / 2), e3.lineTo(-r3 / 2, -r3 / 2);
              } }));
            }, t3.prototype._basicCornersRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, -Math.PI / 2, 0), e3.lineTo(r3 / 2, r3 / 2), e3.lineTo(0, r3 / 2), e3.arc(0, 0, r3 / 2, Math.PI / 2, Math.PI), e3.lineTo(-r3 / 2, -r3 / 2), e3.lineTo(0, -r3 / 2);
              } }));
            }, t3.prototype._basicCornersExtraRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(c(c({}, t4), { draw: function() {
                e3.arc(-r3 / 2, r3 / 2, r3, -Math.PI / 2, 0), e3.arc(r3 / 2, -r3 / 2, r3, Math.PI / 2, Math.PI);
              } }));
            }, t3.prototype._drawDot = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context;
              this._basicDot({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
            }, t3.prototype._drawSquare = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context;
              this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
            }, t3.prototype._drawRounded = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.getNeighbor, a2 = +i2(-1, 0), s2 = +i2(1, 0), u2 = +i2(0, -1), c2 = +i2(0, 1), h2 = a2 + s2 + u2 + c2;
              if (h2 !== 0)
                if (h2 > 2 || a2 && s2 || u2 && c2)
                  this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
                else {
                  if (h2 === 2) {
                    var f2 = 0;
                    return a2 && u2 ? f2 = Math.PI / 2 : u2 && s2 ? f2 = Math.PI : s2 && c2 && (f2 = -Math.PI / 2), void this._basicCornerRounded({ x: r3, y: e3, size: n2, context: o2, rotation: f2 });
                  }
                  h2 === 1 && (f2 = 0, u2 ? f2 = Math.PI / 2 : s2 ? f2 = Math.PI : c2 && (f2 = -Math.PI / 2), this._basicSideRounded({ x: r3, y: e3, size: n2, context: o2, rotation: f2 }));
                }
              else
                this._basicDot({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
            }, t3.prototype._drawExtraRounded = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.getNeighbor, a2 = +i2(-1, 0), s2 = +i2(1, 0), u2 = +i2(0, -1), c2 = +i2(0, 1), h2 = a2 + s2 + u2 + c2;
              if (h2 !== 0)
                if (h2 > 2 || a2 && s2 || u2 && c2)
                  this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
                else {
                  if (h2 === 2) {
                    var f2 = 0;
                    return a2 && u2 ? f2 = Math.PI / 2 : u2 && s2 ? f2 = Math.PI : s2 && c2 && (f2 = -Math.PI / 2), void this._basicCornerExtraRounded({ x: r3, y: e3, size: n2, context: o2, rotation: f2 });
                  }
                  h2 === 1 && (f2 = 0, u2 ? f2 = Math.PI / 2 : s2 ? f2 = Math.PI : c2 && (f2 = -Math.PI / 2), this._basicSideRounded({ x: r3, y: e3, size: n2, context: o2, rotation: f2 }));
                }
              else
                this._basicDot({ x: r3, y: e3, size: n2, context: o2, rotation: 0 });
            }, t3.prototype._drawClassy = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.getNeighbor, a2 = +i2(-1, 0), s2 = +i2(1, 0), u2 = +i2(0, -1), c2 = +i2(0, 1);
              a2 + s2 + u2 + c2 !== 0 ? a2 || u2 ? s2 || c2 ? this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: 0 }) : this._basicCornerRounded({ x: r3, y: e3, size: n2, context: o2, rotation: Math.PI / 2 }) : this._basicCornerRounded({ x: r3, y: e3, size: n2, context: o2, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: r3, y: e3, size: n2, context: o2, rotation: Math.PI / 2 });
            }, t3.prototype._drawClassyRounded = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.getNeighbor, a2 = +i2(-1, 0), s2 = +i2(1, 0), u2 = +i2(0, -1), c2 = +i2(0, 1);
              a2 + s2 + u2 + c2 !== 0 ? a2 || u2 ? s2 || c2 ? this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: 0 }) : this._basicCornerExtraRounded({ x: r3, y: e3, size: n2, context: o2, rotation: Math.PI / 2 }) : this._basicCornerExtraRounded({ x: r3, y: e3, size: n2, context: o2, rotation: -Math.PI / 2 }) : this._basicCornersRounded({ x: r3, y: e3, size: n2, context: o2, rotation: Math.PI / 2 });
            }, t3;
          }();
          var f = function() {
            return (f = Object.assign || function(t3) {
              for (var r3, e3 = 1, n2 = arguments.length; e3 < n2; e3++)
                for (var o2 in r3 = arguments[e3])
                  Object.prototype.hasOwnProperty.call(r3, o2) && (t3[o2] = r3[o2]);
              return t3;
            }).apply(this, arguments);
          };
          const l = function() {
            function t3(t4) {
              var r3 = t4.context, e3 = t4.type;
              this._context = r3, this._type = e3;
            }
            return t3.prototype.draw = function(t4, r3, e3, n2) {
              var o2, i2 = this._context;
              switch (this._type) {
                case "square":
                  o2 = this._drawSquare;
                  break;
                case "extra-rounded":
                  o2 = this._drawExtraRounded;
                  break;
                case "dot":
                default:
                  o2 = this._drawDot;
              }
              o2.call(this, { x: t4, y: r3, size: e3, context: i2, rotation: n2 });
            }, t3.prototype._rotateFigure = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation, a2 = t4.draw, s2 = r3 + n2 / 2, u2 = e3 + n2 / 2;
              o2.translate(s2, u2), i2 && o2.rotate(i2), a2(), o2.closePath(), i2 && o2.rotate(-i2), o2.translate(-s2, -u2);
            }, t3.prototype._basicDot = function(t4) {
              var r3 = t4.size, e3 = t4.context, n2 = r3 / 7;
              this._rotateFigure(f(f({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, 0, 2 * Math.PI), e3.arc(0, 0, r3 / 2 - n2, 0, 2 * Math.PI);
              } }));
            }, t3.prototype._basicSquare = function(t4) {
              var r3 = t4.size, e3 = t4.context, n2 = r3 / 7;
              this._rotateFigure(f(f({}, t4), { draw: function() {
                e3.rect(-r3 / 2, -r3 / 2, r3, r3), e3.rect(-r3 / 2 + n2, -r3 / 2 + n2, r3 - 2 * n2, r3 - 2 * n2);
              } }));
            }, t3.prototype._basicExtraRounded = function(t4) {
              var r3 = t4.size, e3 = t4.context, n2 = r3 / 7;
              this._rotateFigure(f(f({}, t4), { draw: function() {
                e3.arc(-n2, -n2, 2.5 * n2, Math.PI, -Math.PI / 2), e3.lineTo(n2, -3.5 * n2), e3.arc(n2, -n2, 2.5 * n2, -Math.PI / 2, 0), e3.lineTo(3.5 * n2, -n2), e3.arc(n2, n2, 2.5 * n2, 0, Math.PI / 2), e3.lineTo(-n2, 3.5 * n2), e3.arc(-n2, n2, 2.5 * n2, Math.PI / 2, Math.PI), e3.lineTo(-3.5 * n2, -n2), e3.arc(-n2, -n2, 1.5 * n2, Math.PI, -Math.PI / 2), e3.lineTo(n2, -2.5 * n2), e3.arc(n2, -n2, 1.5 * n2, -Math.PI / 2, 0), e3.lineTo(2.5 * n2, -n2), e3.arc(n2, n2, 1.5 * n2, 0, Math.PI / 2), e3.lineTo(-n2, 2.5 * n2), e3.arc(-n2, n2, 1.5 * n2, Math.PI / 2, Math.PI), e3.lineTo(-2.5 * n2, -n2);
              } }));
            }, t3.prototype._drawDot = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation;
              this._basicDot({ x: r3, y: e3, size: n2, context: o2, rotation: i2 });
            }, t3.prototype._drawSquare = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation;
              this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: i2 });
            }, t3.prototype._drawExtraRounded = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation;
              this._basicExtraRounded({ x: r3, y: e3, size: n2, context: o2, rotation: i2 });
            }, t3;
          }();
          var d = function() {
            return (d = Object.assign || function(t3) {
              for (var r3, e3 = 1, n2 = arguments.length; e3 < n2; e3++)
                for (var o2 in r3 = arguments[e3])
                  Object.prototype.hasOwnProperty.call(r3, o2) && (t3[o2] = r3[o2]);
              return t3;
            }).apply(this, arguments);
          };
          const g = function() {
            function t3(t4) {
              var r3 = t4.context, e3 = t4.type;
              this._context = r3, this._type = e3;
            }
            return t3.prototype.draw = function(t4, r3, e3, n2) {
              var o2, i2 = this._context;
              switch (this._type) {
                case "square":
                  o2 = this._drawSquare;
                  break;
                case "dot":
                default:
                  o2 = this._drawDot;
              }
              o2.call(this, { x: t4, y: r3, size: e3, context: i2, rotation: n2 });
            }, t3.prototype._rotateFigure = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation, a2 = t4.draw, s2 = r3 + n2 / 2, u2 = e3 + n2 / 2;
              o2.translate(s2, u2), i2 && o2.rotate(i2), a2(), o2.closePath(), i2 && o2.rotate(-i2), o2.translate(-s2, -u2);
            }, t3.prototype._basicDot = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(d(d({}, t4), { draw: function() {
                e3.arc(0, 0, r3 / 2, 0, 2 * Math.PI);
              } }));
            }, t3.prototype._basicSquare = function(t4) {
              var r3 = t4.size, e3 = t4.context;
              this._rotateFigure(d(d({}, t4), { draw: function() {
                e3.rect(-r3 / 2, -r3 / 2, r3, r3);
              } }));
            }, t3.prototype._drawDot = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation;
              this._basicDot({ x: r3, y: e3, size: n2, context: o2, rotation: i2 });
            }, t3.prototype._drawSquare = function(t4) {
              var r3 = t4.x, e3 = t4.y, n2 = t4.size, o2 = t4.context, i2 = t4.rotation;
              this._basicSquare({ x: r3, y: e3, size: n2, context: o2, rotation: i2 });
            }, t3;
          }();
          var p = [[1, 1, 1, 1, 1, 1, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 1, 1, 1]], v = [[0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 0, 0], [0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0]];
          const y = function() {
            function t3(t4) {
              this._canvas = document.createElement("canvas"), this._canvas.width = t4.width, this._canvas.height = t4.height, this._options = t4;
            }
            return Object.defineProperty(t3.prototype, "context", { get: function() {
              return this._canvas.getContext("2d");
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "width", { get: function() {
              return this._canvas.width;
            }, enumerable: false, configurable: true }), Object.defineProperty(t3.prototype, "height", { get: function() {
              return this._canvas.height;
            }, enumerable: false, configurable: true }), t3.prototype.getCanvas = function() {
              return this._canvas;
            }, t3.prototype.clear = function() {
              var t4 = this.context;
              t4 && t4.clearRect(0, 0, this._canvas.width, this._canvas.height);
            }, t3.prototype.drawQR = function(t4) {
              return r3 = this, e3 = void 0, o2 = function() {
                var r4, e4, n3, o3, i2, a2, s2, c2, h2, f2 = this;
                return function(t5, r5) {
                  var e5, n4, o4, i3, a3 = { label: 0, sent: function() {
                    if (1 & o4[0])
                      throw o4[1];
                    return o4[1];
                  }, trys: [], ops: [] };
                  return i3 = { next: s3(0), throw: s3(1), return: s3(2) }, typeof Symbol == "function" && (i3[Symbol.iterator] = function() {
                    return this;
                  }), i3;
                  function s3(i4) {
                    return function(s4) {
                      return function(i5) {
                        if (e5)
                          throw new TypeError("Generator is already executing.");
                        for (; a3; )
                          try {
                            if (e5 = 1, n4 && (o4 = 2 & i5[0] ? n4.return : i5[0] ? n4.throw || ((o4 = n4.return) && o4.call(n4), 0) : n4.next) && !(o4 = o4.call(n4, i5[1])).done)
                              return o4;
                            switch (n4 = 0, o4 && (i5 = [2 & i5[0], o4.value]), i5[0]) {
                              case 0:
                              case 1:
                                o4 = i5;
                                break;
                              case 4:
                                return a3.label++, { value: i5[1], done: false };
                              case 5:
                                a3.label++, n4 = i5[1], i5 = [0];
                                continue;
                              case 7:
                                i5 = a3.ops.pop(), a3.trys.pop();
                                continue;
                              default:
                                if (!((o4 = (o4 = a3.trys).length > 0 && o4[o4.length - 1]) || i5[0] !== 6 && i5[0] !== 2)) {
                                  a3 = 0;
                                  continue;
                                }
                                if (i5[0] === 3 && (!o4 || i5[1] > o4[0] && i5[1] < o4[3])) {
                                  a3.label = i5[1];
                                  break;
                                }
                                if (i5[0] === 6 && a3.label < o4[1]) {
                                  a3.label = o4[1], o4 = i5;
                                  break;
                                }
                                if (o4 && a3.label < o4[2]) {
                                  a3.label = o4[2], a3.ops.push(i5);
                                  break;
                                }
                                o4[2] && a3.ops.pop(), a3.trys.pop();
                                continue;
                            }
                            i5 = r5.call(t5, a3);
                          } catch (t6) {
                            i5 = [6, t6], n4 = 0;
                          } finally {
                            e5 = o4 = 0;
                          }
                        if (5 & i5[0])
                          throw i5[1];
                        return { value: i5[0] ? i5[1] : void 0, done: true };
                      }([i4, s4]);
                    };
                  }
                }(this, function(l2) {
                  switch (l2.label) {
                    case 0:
                      return r4 = t4.getModuleCount(), e4 = Math.min(this._options.width, this._options.height) - 2 * this._options.margin, n3 = Math.floor(e4 / r4), o3 = { hideXDots: 0, hideYDots: 0, width: 0, height: 0 }, this._qr = t4, this._options.image ? [4, this.loadImage()] : [3, 2];
                    case 1:
                      if (l2.sent(), !this._image)
                        return [2];
                      i2 = this._options, a2 = i2.imageOptions, s2 = i2.qrOptions, c2 = a2.imageSize * u[s2.errorCorrectionLevel], h2 = Math.floor(c2 * r4 * r4), o3 = function(t5) {
                        var r5 = t5.originalHeight, e5 = t5.originalWidth, n4 = t5.maxHiddenDots, o4 = t5.maxHiddenAxisDots, i3 = t5.dotSize, a3 = { x: 0, y: 0 }, s3 = { x: 0, y: 0 };
                        if (r5 <= 0 || e5 <= 0 || n4 <= 0 || i3 <= 0)
                          return { height: 0, width: 0, hideYDots: 0, hideXDots: 0 };
                        var u2 = r5 / e5;
                        return a3.x = Math.floor(Math.sqrt(n4 / u2)), a3.x <= 0 && (a3.x = 1), o4 && o4 < a3.x && (a3.x = o4), a3.x % 2 == 0 && a3.x--, s3.x = a3.x * i3, a3.y = 1 + 2 * Math.ceil((a3.x * u2 - 1) / 2), s3.y = Math.round(s3.x * u2), (a3.y * a3.x > n4 || o4 && o4 < a3.y) && (o4 && o4 < a3.y ? (a3.y = o4, a3.y % 2 == 0 && a3.x--) : a3.y -= 2, s3.y = a3.y * i3, a3.x = 1 + 2 * Math.ceil((a3.y / u2 - 1) / 2), s3.x = Math.round(s3.y / u2)), { height: s3.y, width: s3.x, hideYDots: a3.y, hideXDots: a3.x };
                      }({ originalWidth: this._image.width, originalHeight: this._image.height, maxHiddenDots: h2, maxHiddenAxisDots: r4 - 14, dotSize: n3 }), l2.label = 2;
                    case 2:
                      return this.clear(), this.drawBackground(), this.drawDots(function(t5, e5) {
                        var n4, i3, a3, s3, u2, c3;
                        return !(f2._options.imageOptions.hideBackgroundDots && t5 >= (r4 - o3.hideXDots) / 2 && t5 < (r4 + o3.hideXDots) / 2 && e5 >= (r4 - o3.hideYDots) / 2 && e5 < (r4 + o3.hideYDots) / 2 || ((n4 = p[t5]) === null || n4 === void 0 ? void 0 : n4[e5]) || ((i3 = p[t5 - r4 + 7]) === null || i3 === void 0 ? void 0 : i3[e5]) || ((a3 = p[t5]) === null || a3 === void 0 ? void 0 : a3[e5 - r4 + 7]) || ((s3 = v[t5]) === null || s3 === void 0 ? void 0 : s3[e5]) || ((u2 = v[t5 - r4 + 7]) === null || u2 === void 0 ? void 0 : u2[e5]) || ((c3 = v[t5]) === null || c3 === void 0 ? void 0 : c3[e5 - r4 + 7]));
                      }), this.drawCorners(), this._options.image && this.drawImage({ width: o3.width, height: o3.height, count: r4, dotSize: n3 }), [2];
                  }
                });
              }, new ((n2 = void 0) || (n2 = Promise))(function(t5, i2) {
                function a2(t6) {
                  try {
                    u2(o2.next(t6));
                  } catch (t7) {
                    i2(t7);
                  }
                }
                function s2(t6) {
                  try {
                    u2(o2.throw(t6));
                  } catch (t7) {
                    i2(t7);
                  }
                }
                function u2(r4) {
                  var e4;
                  r4.done ? t5(r4.value) : (e4 = r4.value, e4 instanceof n2 ? e4 : new n2(function(t6) {
                    t6(e4);
                  })).then(a2, s2);
                }
                u2((o2 = o2.apply(r3, e3 || [])).next());
              });
              var r3, e3, n2, o2;
            }, t3.prototype.drawBackground = function() {
              var t4 = this.context, r3 = this._options;
              if (t4) {
                if (r3.backgroundOptions.gradient) {
                  var e3 = r3.backgroundOptions.gradient, n2 = this._createGradient({ context: t4, options: e3, additionalRotation: 0, x: 0, y: 0, size: this._canvas.width > this._canvas.height ? this._canvas.width : this._canvas.height });
                  e3.colorStops.forEach(function(t5) {
                    var r4 = t5.offset, e4 = t5.color;
                    n2.addColorStop(r4, e4);
                  }), t4.fillStyle = n2;
                } else
                  r3.backgroundOptions.color && (t4.fillStyle = r3.backgroundOptions.color);
                t4.fillRect(0, 0, this._canvas.width, this._canvas.height);
              }
            }, t3.prototype.drawDots = function(t4) {
              var r3 = this;
              if (!this._qr)
                throw "QR code is not defined";
              var e3 = this.context;
              if (!e3)
                throw "QR code is not defined";
              var n2 = this._options, o2 = this._qr.getModuleCount();
              if (o2 > n2.width || o2 > n2.height)
                throw "The canvas is too small.";
              var i2 = Math.min(n2.width, n2.height) - 2 * n2.margin, a2 = Math.floor(i2 / o2), s2 = Math.floor((n2.width - o2 * a2) / 2), u2 = Math.floor((n2.height - o2 * a2) / 2), c2 = new h({ context: e3, type: n2.dotsOptions.type });
              e3.beginPath();
              for (var f2 = function(e4) {
                for (var n3 = function(n4) {
                  return t4 && !t4(e4, n4) ? "continue" : l2._qr.isDark(e4, n4) ? void c2.draw(s2 + e4 * a2, u2 + n4 * a2, a2, function(i4, a3) {
                    return !(e4 + i4 < 0 || n4 + a3 < 0 || e4 + i4 >= o2 || n4 + a3 >= o2) && !(t4 && !t4(e4 + i4, n4 + a3)) && !!r3._qr && r3._qr.isDark(e4 + i4, n4 + a3);
                  }) : "continue";
                }, i3 = 0; i3 < o2; i3++)
                  n3(i3);
              }, l2 = this, d2 = 0; d2 < o2; d2++)
                f2(d2);
              if (n2.dotsOptions.gradient) {
                var g2 = n2.dotsOptions.gradient, p2 = this._createGradient({ context: e3, options: g2, additionalRotation: 0, x: s2, y: u2, size: o2 * a2 });
                g2.colorStops.forEach(function(t5) {
                  var r4 = t5.offset, e4 = t5.color;
                  p2.addColorStop(r4, e4);
                }), e3.fillStyle = e3.strokeStyle = p2;
              } else
                n2.dotsOptions.color && (e3.fillStyle = e3.strokeStyle = n2.dotsOptions.color);
              e3.fill("evenodd");
            }, t3.prototype.drawCorners = function(t4) {
              var r3 = this;
              if (!this._qr)
                throw "QR code is not defined";
              var e3 = this.context;
              if (!e3)
                throw "QR code is not defined";
              var n2 = this._options, o2 = this._qr.getModuleCount(), i2 = Math.min(n2.width, n2.height) - 2 * n2.margin, a2 = Math.floor(i2 / o2), s2 = 7 * a2, u2 = 3 * a2, c2 = Math.floor((n2.width - o2 * a2) / 2), f2 = Math.floor((n2.height - o2 * a2) / 2);
              [[0, 0, 0], [1, 0, Math.PI / 2], [0, 1, -Math.PI / 2]].forEach(function(i3) {
                var d2, y2, w2, x2, b2, m3, _2, M2, O2, S2, k2 = i3[0], C2 = i3[1], P2 = i3[2];
                if (!t4 || t4(k2, C2)) {
                  var D2 = c2 + k2 * a2 * (o2 - 7), I = f2 + C2 * a2 * (o2 - 7);
                  if ((d2 = n2.cornersSquareOptions) === null || d2 === void 0 ? void 0 : d2.type) {
                    var B = new l({ context: e3, type: (y2 = n2.cornersSquareOptions) === null || y2 === void 0 ? void 0 : y2.type });
                    e3.beginPath(), B.draw(D2, I, s2, P2);
                  } else {
                    var q = new h({ context: e3, type: n2.dotsOptions.type });
                    e3.beginPath();
                    for (var z = function(t5) {
                      for (var r4 = function(r5) {
                        if (!((w2 = p[t5]) === null || w2 === void 0 ? void 0 : w2[r5]))
                          return "continue";
                        q.draw(D2 + t5 * a2, I + r5 * a2, a2, function(e5, n3) {
                          var o3;
                          return !!((o3 = p[t5 + e5]) === null || o3 === void 0 ? void 0 : o3[r5 + n3]);
                        });
                      }, e4 = 0; e4 < p[t5].length; e4++)
                        r4(e4);
                    }, A = 0; A < p.length; A++)
                      z(A);
                  }
                  if ((x2 = n2.cornersSquareOptions) === null || x2 === void 0 ? void 0 : x2.gradient) {
                    var R = n2.cornersSquareOptions.gradient, L = r3._createGradient({ context: e3, options: R, additionalRotation: P2, x: D2, y: I, size: s2 });
                    R.colorStops.forEach(function(t5) {
                      var r4 = t5.offset, e4 = t5.color;
                      L.addColorStop(r4, e4);
                    }), e3.fillStyle = e3.strokeStyle = L;
                  } else
                    ((b2 = n2.cornersSquareOptions) === null || b2 === void 0 ? void 0 : b2.color) && (e3.fillStyle = e3.strokeStyle = n2.cornersSquareOptions.color);
                  if (e3.fill("evenodd"), (m3 = n2.cornersDotOptions) === null || m3 === void 0 ? void 0 : m3.type) {
                    var T = new g({ context: e3, type: (_2 = n2.cornersDotOptions) === null || _2 === void 0 ? void 0 : _2.type });
                    e3.beginPath(), T.draw(D2 + 2 * a2, I + 2 * a2, u2, P2);
                  } else {
                    q = new h({ context: e3, type: n2.dotsOptions.type }), e3.beginPath();
                    var j = function(t5) {
                      for (var r4 = function(r5) {
                        if (!((M2 = v[t5]) === null || M2 === void 0 ? void 0 : M2[r5]))
                          return "continue";
                        q.draw(D2 + t5 * a2, I + r5 * a2, a2, function(e5, n3) {
                          var o3;
                          return !!((o3 = v[t5 + e5]) === null || o3 === void 0 ? void 0 : o3[r5 + n3]);
                        });
                      }, e4 = 0; e4 < v[t5].length; e4++)
                        r4(e4);
                    };
                    for (A = 0; A < v.length; A++)
                      j(A);
                  }
                  if ((O2 = n2.cornersDotOptions) === null || O2 === void 0 ? void 0 : O2.gradient) {
                    R = n2.cornersDotOptions.gradient;
                    var N = r3._createGradient({ context: e3, options: R, additionalRotation: P2, x: D2 + 2 * a2, y: I + 2 * a2, size: u2 });
                    R.colorStops.forEach(function(t5) {
                      var r4 = t5.offset, e4 = t5.color;
                      N.addColorStop(r4, e4);
                    }), e3.fillStyle = e3.strokeStyle = N;
                  } else
                    ((S2 = n2.cornersDotOptions) === null || S2 === void 0 ? void 0 : S2.color) && (e3.fillStyle = e3.strokeStyle = n2.cornersDotOptions.color);
                  e3.fill("evenodd");
                }
              });
            }, t3.prototype.loadImage = function() {
              var t4 = this;
              return new Promise(function(r3, e3) {
                var n2 = t4._options, o2 = new Image();
                if (!n2.image)
                  return e3("Image is not defined");
                typeof n2.imageOptions.crossOrigin == "string" && (o2.crossOrigin = n2.imageOptions.crossOrigin), t4._image = o2, o2.onload = function() {
                  r3();
                }, o2.src = n2.image;
              });
            }, t3.prototype.drawImage = function(t4) {
              var r3 = t4.width, e3 = t4.height, n2 = t4.count, o2 = t4.dotSize, i2 = this.context;
              if (!i2)
                throw "canvasContext is not defined";
              if (!this._image)
                throw "image is not defined";
              var a2 = this._options, s2 = Math.floor((a2.width - n2 * o2) / 2), u2 = Math.floor((a2.height - n2 * o2) / 2), c2 = s2 + a2.imageOptions.margin + (n2 * o2 - r3) / 2, h2 = u2 + a2.imageOptions.margin + (n2 * o2 - e3) / 2, f2 = r3 - 2 * a2.imageOptions.margin, l2 = e3 - 2 * a2.imageOptions.margin;
              i2.drawImage(this._image, c2, h2, f2 < 0 ? 0 : f2, l2 < 0 ? 0 : l2);
            }, t3.prototype._createGradient = function(t4) {
              var r3, e3 = t4.context, n2 = t4.options, o2 = t4.additionalRotation, i2 = t4.x, a2 = t4.y, s2 = t4.size;
              if (n2.type === "radial")
                r3 = e3.createRadialGradient(i2 + s2 / 2, a2 + s2 / 2, 0, i2 + s2 / 2, a2 + s2 / 2, s2 / 2);
              else {
                var u2 = ((n2.rotation || 0) + o2) % (2 * Math.PI), c2 = (u2 + 2 * Math.PI) % (2 * Math.PI), h2 = i2 + s2 / 2, f2 = a2 + s2 / 2, l2 = i2 + s2 / 2, d2 = a2 + s2 / 2;
                c2 >= 0 && c2 <= 0.25 * Math.PI || c2 > 1.75 * Math.PI && c2 <= 2 * Math.PI ? (h2 -= s2 / 2, f2 -= s2 / 2 * Math.tan(u2), l2 += s2 / 2, d2 += s2 / 2 * Math.tan(u2)) : c2 > 0.25 * Math.PI && c2 <= 0.75 * Math.PI ? (f2 -= s2 / 2, h2 -= s2 / 2 / Math.tan(u2), d2 += s2 / 2, l2 += s2 / 2 / Math.tan(u2)) : c2 > 0.75 * Math.PI && c2 <= 1.25 * Math.PI ? (h2 += s2 / 2, f2 += s2 / 2 * Math.tan(u2), l2 -= s2 / 2, d2 -= s2 / 2 * Math.tan(u2)) : c2 > 1.25 * Math.PI && c2 <= 1.75 * Math.PI && (f2 += s2 / 2, h2 += s2 / 2 / Math.tan(u2), d2 -= s2 / 2, l2 -= s2 / 2 / Math.tan(u2)), r3 = e3.createLinearGradient(Math.round(h2), Math.round(f2), Math.round(l2), Math.round(d2));
              }
              return r3;
            }, t3;
          }();
          for (var w = {}, x = 0; x <= 40; x++)
            w[x] = x;
          const b = { width: 300, height: 300, data: "", margin: 0, qrOptions: { typeNumber: w[0], mode: void 0, errorCorrectionLevel: "Q" }, imageOptions: { hideBackgroundDots: true, imageSize: 0.4, crossOrigin: void 0, margin: 0 }, dotsOptions: { type: "square", color: "#000" }, backgroundOptions: { color: "#fff" } };
          var m2 = function() {
            return (m2 = Object.assign || function(t3) {
              for (var r3, e3 = 1, n2 = arguments.length; e3 < n2; e3++)
                for (var o2 in r3 = arguments[e3])
                  Object.prototype.hasOwnProperty.call(r3, o2) && (t3[o2] = r3[o2]);
              return t3;
            }).apply(this, arguments);
          };
          function _(t3) {
            var r3 = m2({}, t3);
            if (!r3.colorStops || !r3.colorStops.length)
              throw "Field 'colorStops' is required in gradient";
            return r3.rotation ? r3.rotation = Number(r3.rotation) : r3.rotation = 0, r3.colorStops = r3.colorStops.map(function(t4) {
              return m2(m2({}, t4), { offset: Number(t4.offset) });
            }), r3;
          }
          function M(t3) {
            var r3 = m2({}, t3);
            return r3.width = Number(r3.width), r3.height = Number(r3.height), r3.margin = Number(r3.margin), r3.imageOptions = m2(m2({}, r3.imageOptions), { hideBackgroundDots: Boolean(r3.imageOptions.hideBackgroundDots), imageSize: Number(r3.imageOptions.imageSize), margin: Number(r3.imageOptions.margin) }), r3.margin > Math.min(r3.width, r3.height) && (r3.margin = Math.min(r3.width, r3.height)), r3.dotsOptions = m2({}, r3.dotsOptions), r3.dotsOptions.gradient && (r3.dotsOptions.gradient = _(r3.dotsOptions.gradient)), r3.cornersSquareOptions && (r3.cornersSquareOptions = m2({}, r3.cornersSquareOptions), r3.cornersSquareOptions.gradient && (r3.cornersSquareOptions.gradient = _(r3.cornersSquareOptions.gradient))), r3.cornersDotOptions && (r3.cornersDotOptions = m2({}, r3.cornersDotOptions), r3.cornersDotOptions.gradient && (r3.cornersDotOptions.gradient = _(r3.cornersDotOptions.gradient))), r3.backgroundOptions && (r3.backgroundOptions = m2({}, r3.backgroundOptions), r3.backgroundOptions.gradient && (r3.backgroundOptions.gradient = _(r3.backgroundOptions.gradient))), r3;
          }
          var O = n(192), S = n.n(O);
          const k = function() {
            function t3(t4) {
              this._options = t4 ? M(s(b, t4)) : b, this.update();
            }
            return t3._clearContainer = function(t4) {
              t4 && (t4.innerHTML = "");
            }, t3.prototype.update = function(r3) {
              t3._clearContainer(this._container), this._options = r3 ? M(s(this._options, r3)) : this._options, this._options.data && (this._qr = S()(this._options.qrOptions.typeNumber, this._options.qrOptions.errorCorrectionLevel), this._qr.addData(this._options.data, this._options.qrOptions.mode || function(t4) {
                switch (true) {
                  case /^[0-9]*$/.test(t4):
                    return "Numeric";
                  case /^[0-9A-Z $%*+\-./:]*$/.test(t4):
                    return "Alphanumeric";
                  default:
                    return "Byte";
                }
              }(this._options.data)), this._qr.make(), this._canvas = new y(this._options), this._drawingPromise = this._canvas.drawQR(this._qr), this.append(this._container));
            }, t3.prototype.append = function(t4) {
              if (t4) {
                if (typeof t4.appendChild != "function")
                  throw "Container should be a single DOM node";
                this._canvas && t4.appendChild(this._canvas.getCanvas()), this._container = t4;
              }
            }, t3.prototype.getImageUrl = function(t4) {
              return r3 = this, e3 = void 0, o2 = function() {
                return function(t5, r4) {
                  var e4, n3, o3, i2, a2 = { label: 0, sent: function() {
                    if (1 & o3[0])
                      throw o3[1];
                    return o3[1];
                  }, trys: [], ops: [] };
                  return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (i2[Symbol.iterator] = function() {
                    return this;
                  }), i2;
                  function s2(i3) {
                    return function(s3) {
                      return function(i4) {
                        if (e4)
                          throw new TypeError("Generator is already executing.");
                        for (; a2; )
                          try {
                            if (e4 = 1, n3 && (o3 = 2 & i4[0] ? n3.return : i4[0] ? n3.throw || ((o3 = n3.return) && o3.call(n3), 0) : n3.next) && !(o3 = o3.call(n3, i4[1])).done)
                              return o3;
                            switch (n3 = 0, o3 && (i4 = [2 & i4[0], o3.value]), i4[0]) {
                              case 0:
                              case 1:
                                o3 = i4;
                                break;
                              case 4:
                                return a2.label++, { value: i4[1], done: false };
                              case 5:
                                a2.label++, n3 = i4[1], i4 = [0];
                                continue;
                              case 7:
                                i4 = a2.ops.pop(), a2.trys.pop();
                                continue;
                              default:
                                if (!((o3 = (o3 = a2.trys).length > 0 && o3[o3.length - 1]) || i4[0] !== 6 && i4[0] !== 2)) {
                                  a2 = 0;
                                  continue;
                                }
                                if (i4[0] === 3 && (!o3 || i4[1] > o3[0] && i4[1] < o3[3])) {
                                  a2.label = i4[1];
                                  break;
                                }
                                if (i4[0] === 6 && a2.label < o3[1]) {
                                  a2.label = o3[1], o3 = i4;
                                  break;
                                }
                                if (o3 && a2.label < o3[2]) {
                                  a2.label = o3[2], a2.ops.push(i4);
                                  break;
                                }
                                o3[2] && a2.ops.pop(), a2.trys.pop();
                                continue;
                            }
                            i4 = r4.call(t5, a2);
                          } catch (t6) {
                            i4 = [6, t6], n3 = 0;
                          } finally {
                            e4 = o3 = 0;
                          }
                        if (5 & i4[0])
                          throw i4[1];
                        return { value: i4[0] ? i4[1] : void 0, done: true };
                      }([i3, s3]);
                    };
                  }
                }(this, function(r4) {
                  switch (r4.label) {
                    case 0:
                      return this._drawingPromise ? [4, this._drawingPromise] : [2, ""];
                    case 1:
                      return r4.sent() === void 0 && this._canvas ? [2, this._canvas.getCanvas().toDataURL("image/" + t4)] : [2, ""];
                  }
                });
              }, new ((n2 = void 0) || (n2 = Promise))(function(t5, i2) {
                function a2(t6) {
                  try {
                    u2(o2.next(t6));
                  } catch (t7) {
                    i2(t7);
                  }
                }
                function s2(t6) {
                  try {
                    u2(o2.throw(t6));
                  } catch (t7) {
                    i2(t7);
                  }
                }
                function u2(r4) {
                  var e4;
                  r4.done ? t5(r4.value) : (e4 = r4.value, e4 instanceof n2 ? e4 : new n2(function(t6) {
                    t6(e4);
                  })).then(a2, s2);
                }
                u2((o2 = o2.apply(r3, e3 || [])).next());
              });
              var r3, e3, n2, o2;
            }, t3.prototype.download = function(t4) {
              var r3 = this;
              this._drawingPromise && this._drawingPromise.then(function() {
                if (r3._canvas) {
                  var e3 = t4, n2 = e3.extension || "png", o2 = e3.name || "qr";
                  !function(t5, r4) {
                    var e4 = document.createElement("a");
                    e4.download = r4, e4.href = t5, document.body.appendChild(e4), e4.click(), document.body.removeChild(e4);
                  }(r3._canvas.getCanvas().toDataURL("image/" + n2), o2 + "." + n2);
                }
              });
            }, t3;
          }();
          var C = function(t3, r3, e3, n2) {
            return new (e3 || (e3 = Promise))(function(o2, i2) {
              function a2(t4) {
                try {
                  u2(n2.next(t4));
                } catch (t5) {
                  i2(t5);
                }
              }
              function s2(t4) {
                try {
                  u2(n2.throw(t4));
                } catch (t5) {
                  i2(t5);
                }
              }
              function u2(t4) {
                var r4;
                t4.done ? o2(t4.value) : (r4 = t4.value, r4 instanceof e3 ? r4 : new e3(function(t5) {
                  t5(r4);
                })).then(a2, s2);
              }
              u2((n2 = n2.apply(t3, r3 || [])).next());
            });
          }, P = function(t3, r3) {
            var e3, n2, o2, i2, a2 = { label: 0, sent: function() {
              if (1 & o2[0])
                throw o2[1];
              return o2[1];
            }, trys: [], ops: [] };
            return i2 = { next: s2(0), throw: s2(1), return: s2(2) }, typeof Symbol == "function" && (i2[Symbol.iterator] = function() {
              return this;
            }), i2;
            function s2(i3) {
              return function(s3) {
                return function(i4) {
                  if (e3)
                    throw new TypeError("Generator is already executing.");
                  for (; a2; )
                    try {
                      if (e3 = 1, n2 && (o2 = 2 & i4[0] ? n2.return : i4[0] ? n2.throw || ((o2 = n2.return) && o2.call(n2), 0) : n2.next) && !(o2 = o2.call(n2, i4[1])).done)
                        return o2;
                      switch (n2 = 0, o2 && (i4 = [2 & i4[0], o2.value]), i4[0]) {
                        case 0:
                        case 1:
                          o2 = i4;
                          break;
                        case 4:
                          return a2.label++, { value: i4[1], done: false };
                        case 5:
                          a2.label++, n2 = i4[1], i4 = [0];
                          continue;
                        case 7:
                          i4 = a2.ops.pop(), a2.trys.pop();
                          continue;
                        default:
                          if (!((o2 = (o2 = a2.trys).length > 0 && o2[o2.length - 1]) || i4[0] !== 6 && i4[0] !== 2)) {
                            a2 = 0;
                            continue;
                          }
                          if (i4[0] === 3 && (!o2 || i4[1] > o2[0] && i4[1] < o2[3])) {
                            a2.label = i4[1];
                            break;
                          }
                          if (i4[0] === 6 && a2.label < o2[1]) {
                            a2.label = o2[1], o2 = i4;
                            break;
                          }
                          if (o2 && a2.label < o2[2]) {
                            a2.label = o2[2], a2.ops.push(i4);
                            break;
                          }
                          o2[2] && a2.ops.pop(), a2.trys.pop();
                          continue;
                      }
                      i4 = r3.call(t3, a2);
                    } catch (t4) {
                      i4 = [6, t4], n2 = 0;
                    } finally {
                      e3 = o2 = 0;
                    }
                  if (5 & i4[0])
                    throw i4[1];
                  return { value: i4[0] ? i4[1] : void 0, done: true };
                }([i3, s3]);
              };
            }
          };
          const D = { name: "QRCodeVue3", props: { width: { type: Number, default: 300 }, imgclass: { type: String, default: "" }, myclass: { type: String, default: "" }, downloadButton: { type: String, default: "" }, ButtonName: { type: String, default: "Download3" }, height: { type: Number, default: 300 }, value: { type: String, required: true }, image: { type: String, default: "" }, qrOptions: { type: Object, default: function() {
            return { typeNumber: 0, mode: "Byte", errorCorrectionLevel: "Q" };
          } }, imageOptions: { type: Object, default: function() {
            return { hideBackgroundDots: true, imageSize: 0.4, margin: 0 };
          } }, dotsOptions: { type: Object, default: function() {
            return { type: "dots", color: "#6a1a4c", gradient: { type: "linear", rotation: 0, colorStops: [{ offset: 0, color: "#6a1a4c" }, { offset: 1, color: "#6a1a4c" }] } };
          } }, backgroundOptions: { type: Object, default: function() {
            return { color: "#ffffff" };
          } }, cornersSquareOptions: { type: Object, default: function() {
            return { type: "dot", color: "#000000" };
          } }, cornersDotOptions: { type: Object, default: function() {
            return { type: void 0, color: "#000000" };
          } }, fileExt: { type: String, default: "png" }, download: { type: Boolean, default: false }, downloadOptions: { type: Object, default: function() {
            return { name: "vqr", extension: "png" };
          } } }, data: function() {
            return { imageUrl: "", qrCode: new k({ data: this.value, width: this.width, height: this.height, qrOptions: this.qrOptions, imageOptions: this.imageOptions, dotsOptions: this.dotsOptions, backgroundOptions: this.backgroundOptions, image: this.image, cornersSquareOptions: this.cornersSquareOptions, cornersDotOptions: this.cornersDotOptions }) };
          }, watch: { value: function() {
            return C(this, void 0, void 0, function() {
              var t3;
              return P(this, function(r3) {
                switch (r3.label) {
                  case 0:
                    return this.qrCode = new k({ data: this.value, width: this.width, height: this.height, qrOptions: this.qrOptions, imageOptions: this.imageOptions, dotsOptions: this.dotsOptions, backgroundOptions: this.backgroundOptions, image: this.image, cornersSquareOptions: this.cornersSquareOptions, cornersDotOptions: this.cornersDotOptions }), t3 = this, [4, this.qrCode.getImageUrl(this.fileExt)];
                  case 1:
                    return t3.imageUrl = r3.sent(), [2];
                }
              });
            });
          } }, mounted: function() {
            return C(this, void 0, void 0, function() {
              var t3;
              return P(this, function(r3) {
                switch (r3.label) {
                  case 0:
                    return t3 = this, [4, this.qrCode.getImageUrl(this.fileExt)];
                  case 1:
                    return t3.imageUrl = r3.sent(), [2];
                }
              });
            });
          }, render: function(e3, n2, o2, i2, a2, s2) {
            return (0, t2.openBlock)(), (0, t2.createBlock)("div", null, [a2.imageUrl ? ((0, t2.openBlock)(), (0, t2.createBlock)("div", { key: 0, class: o2.myclass }, [(0, t2.createVNode)("img", { src: a2.imageUrl, class: o2.imgclass, crossorigin: "anonymous" }, null, 10, ["src"])], 2)) : (0, t2.createCommentVNode)("v-if", true), o2.download ? ((0, t2.openBlock)(), (0, t2.createBlock)("div", r2, [(0, t2.createVNode)("button", { onClick: n2[1] || (n2[1] = (...t3) => e3.onDownloadClick && e3.onDownloadClick(...t3)), class: o2.downloadButton }, (0, t2.toDisplayString)(o2.ButtonName), 3)])) : (0, t2.createCommentVNode)("v-if", true)]);
          } };
        })(), o.default;
      })();
    });
  }
});

// dep:qrcode-vue3
init_virtual_process_polyfill();
init_buffer();
var import_lib = __toModule(require_lib());
var import_lib2 = __toModule(require_lib());
var qrcode_vue3_default = import_lib2.default;
var export_VQRCodeStyling = import_lib.VQRCodeStyling;
export {
  export_VQRCodeStyling as VQRCodeStyling,
  qrcode_vue3_default as default
};
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
//# sourceMappingURL=qrcode-vue3.js.map
